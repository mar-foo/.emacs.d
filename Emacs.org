#+TITLE: Emacs configuration
#+AUTHOR: Mario Forzanini
#+HTML_HEAD:<link rel="stylesheet" type="text/css" href="/pub/style.css">
#+startup: overview
* init.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
  ;; init.el --- Emacs initalization file -*- lexical-binding: t -*-
  ;;; Code:
  (add-to-list 'load-path (concat user-emacs-directory "mf-lisp/"))
  (require 'mf-packages)
#+end_src
** Package manager configuration
Configure =package.el= in mf-packages.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-packages.el")
  ;;; mf-packages.el --- Configuration for package manager -*- lexical-binding: t -*-
  ;;; Code:
  (require 'package)

  (setq package-archives '(("org" . "https://orgmode.org/elpa/")
						   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
	(package-refresh-contents))

  ;; Populate the load-path
  (dolist
	  (package-dir (directory-files (concat user-emacs-directory "elpa/") t directory-files-no-dot-files-regexp))
	(add-to-list 'load-path package-dir))

  (provide 'mf-packages)
  ;;; mf-packages.el ends here
#+end_src
** Package install macro
Define a macro to install packages
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
  (defmacro mf/install (package)
	(unless
		(package-installed-p package)
	  (package-install package)))
#+end_src
** Look and feel
Load look and feel configuration from mf-look-and-feel.el as early as possible
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
  (require 'mf-look-and-feel)
#+end_src
*** Better defaults
  #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-look-and-feel.el")
	;;; mf-look-and-feel.el --- Look and feel configuration -*- lexical-binding: t -*-
	;;; Code:
	(setq inhibit-startup-message 1)
	(scroll-bar-mode -1)                    ; Disable scroll bar
	(tool-bar-mode -1)                      ; Disable toolbar
	(tooltip-mode -1)                       ; Disable tooltips
	(menu-bar-mode -1)                      ; Disable menu bar
	(blink-cursor-mode -1)		            ; Disable cursor blinking
	(global-hl-line-mode 1)			        ; Highlight current line
	(show-paren-mode 1)
	(setq show-paren-delay 0)		        ; Highlight matching parentheses
	(fringe-mode)
 #+end_src
*** default-frame-alist
 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-look-and-feel.el")
	(setq-default default-frame-alist
				  (append (list
						   '(font . "Go Mono:style=medium:size=12")
						   '(tool-bar-lines . 0)
						   '(menu-bar-lines . 0)
						   '(right-fringe . 5)
						   '(left-fringe . 5)
						   '(vertical-scroll-bars . nil)))
				  fringes-outside-margins t
				  window-resize-pixelwise t
				  frame-resize-pixelwise t)
	(setq-default initial-frame-alist default-frame-alist)
	(add-hook 'window-configuration-change-hook
			  (lambda()
				(unless
					(or (eq major-mode 'minibuffer-mode) (eq major-mode 'exwm-mode))
				(set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) 5 5))))
 #+end_src
*** display-buffer-alist
 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-look-and-feel.el")
   (setq display-buffer-alist
		 '(("\\*eshell\\*"  (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 0))
		   ("\\*compilation\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 1))
		   ("\\*Flymake diagnostics for" (display-buffer-below-selected)
			(window-height . 0.2))
		   ("\\*slime-repl " (display-buffer-below-selected)
			(window-height . 0.3))
		   ("\\*inferior-lisp\\*" (display-buffer-below-selected)
			(window-height . 0.2))
		   ("\\*sldb " (display-buffer-below-selected)
			(window-height . 0.3))
		   ("\\*Packages\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4))
		   ("\\*\\(Wo\\)\?Man" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 2))
		   ("\\*[Hh]elp" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 1))
		   ("*Libera.Chat" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 1))
		   ("\\*MPC-Songs\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 0))
		   ("\\*MPC Album|Playlists\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 1))
		   ("\\*Agenda Commands\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 1))
		   ("\\*Org Select\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 0))
		   ("\\*Org Export Dispatcher\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4)
			(slot . 1))
		   ("\\*Org Agenda\\*" (display-buffer-in-side-window)
			(side . bottom)
			(window-height . 0.4))
		   ("\\*Org Todo\\*" (display-buffer-in-side-window)
			(side . bottom)
			(slot . 1))))
#+end_src
*** Whitespace mode
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-look-and-feel.el")
	(require 'whitespace)
	(setq whitespace-style '(face empty line-tail trailing)
		  whitespace-line-column 80)
	(global-whitespace-mode)
#+end_src
*** Visual bell
	Flash the modeline red instead of the default bell
	#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-look-and-feel.el")
	;; From doom-themes package
	(defface mf-visual-bell '((t :background "#900000"))
	  "Face for the visual bell")

	(defun mf/visual-bell()
	  "Blink the modeline red. Set `ring-bell-function' to this to use it."
	  (let ((bell-cookie (face-remap-add-relative 'mode-line 'mf-visual-bell)))
		(force-mode-line-update)
		(run-with-timer 0.15 nil
						(lambda (cookie buf)
						  (with-current-buffer buf
							(face-remap-remove-relative cookie)
							(force-mode-line-update)))
						bell-cookie
						(current-buffer))))

	(setq ring-bell-function #'mf/visual-bell)
 #+end_src
*** Handle themes
 Load light theme from 08:00 to 19:00, dark theme otherwise
 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-look-and-feel.el")
   (add-to-list 'custom-theme-load-path (concat user-emacs-directory "mf-lisp/themes/"))
   (if
	   (or (>= (string-to-number (format-time-string "%H")) 19)
		   (<= (string-to-number (format-time-string "%H")) 8))
	   (load-theme 'mf-dark t)
	 (load-theme 'mf t))
 #+end_src
 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-look-and-feel.el")
	 (provide 'mf-look-and-feel)
	 ;;; mf-look-and-feel.el ends here
 #+end_src
** Garbage collection
Raise garbage collection threshold to speed up init time
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src
** Better defaults
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
   (setq-default
	tab-always-indent 'complete		    ; First tab indents, second one completes
	tab-width 4				            ; Smaller width for tab characters
	sentence-end-double-space nil		    ; Use a single space after dots
	mouse-yank-at-point t			        ; Yank at point rather than pointer
	help-window-select t			        ; Focus newly spawned help windows
	visible-bell 1                         ; No bell
	auto-save-default nil                  ; Stop all the #filename# madness
	create-lockfiles nil
	backup-directory-alist '(("." . "~/.cache/emacs-saves/"))
	custom-file (concat user-emacs-directory "custom.el")
	cursor-in-non-selected-windows nil)	; Hide cursor in non selected windows
   (fset #'yes-or-no-p #'y-or-n-p)         ; y or n instead of yes or no
   (delete-selection-mode 1)		        ; Replace region when inserting text
   (recentf-mode 1)                         ; Keep recent file list
   (load-file custom-file)
#+end_src
** Dashboard
   #+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
	 (require 'mf-dashboard)
	 (mf-dashboard-setup-startup-hook)
 #+end_src
   #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-dashboard.el")
		  ;;; mf-dashboard.el --- Custom welcome screen for Emacs -*- lexical-binding: t -*-
		  ;;; Code:
	 (defgroup mf-dashboard nil
	   "My startup screen"
	   :group 'applications)

	 (defvar dashboard-mode-map
	   (let ((map (make-sparse-keymap)))
		 (define-key map (kbd "b") 'switch-to-buffer)
		 (define-key map (kbd "f") 'find-file)
		 (define-key map (kbd "g") 'mf-dashboard-init)
		 (define-key map (kbd "j") 'bookmark-jump)
		 (define-key map (kbd "n") 'next-line)
		 (define-key map (kbd "p") 'previous-line)
		 map)
	   "Keymap for dashboard mode.")

	 (define-derived-mode dashboard-mode fundamental-mode "Dashboard"
	   "Startup screen major mode"
	   :group 'mf-dashboard
	   :syntax-table nil
	   :abbrev-table nil
	   (buffer-disable-undo)
	   (whitespace-mode -1)
	   (linum-mode -1)
	   (display-line-numbers-mode -1)
	   (setq buffer-read-only t
			 truncate-lines t
			 inhibit-startup-screen t))

	 (defcustom mf-dashboard-title "Emacs is a decent operating system only lacking a good text editor"
	   "Title to be displayed in the dashboard"
	   :type '(string)
	   :group 'mf-dashboard)

	 (defconst mf-dashboard-buffer-name "*dashboard*"
	   "Startup screen buffer name")

	 (defconst mf-dashboard-banner-length 300
	   "Width of a banner.")

	 (defconst mf-dashboard-banner-max-height 0
	   "Max height of a banner.")

	 (defconst mf-dashboard-banner-max-width 0
	   "Max width of a banner.")

	 (defface mf-dashboard-logo-title
	   '((t :inherit font-lock-keyword-face))
	   "Face used for the banner title"
	   :group 'mf-dashboard)

	 (defun mf-dashboard-init ()
	   "Insert contents in the startup buffer"
	   (interactive)
	   (with-current-buffer (get-buffer-create mf-dashboard-buffer-name)
		 (let ((buffer-read-only nil))
		   (erase-buffer)
		   (mf-dashboard-insert-title)
		   (mf-dashboard-insert-init-info))
		 (dashboard-mode)))

	 (defun mf-dashboard-center-line (string)
	   "Center a STRING according to it's size."
	   (insert (make-string (max 0 (floor (/ (- (window-width)
												(+ (length string) 1))
											 2)))
							?\ )))

	 (defun mf-dashboard-insert-title ()
	   "Insert banner at the top of the dashboard"
	   (goto-char (point-min))
	   (while (< (count-lines 1 (point)) (- (/ (window-height nil 'floor) 2) 3))
		   (insert "\n")
		   (forward-line))
	   (when mf-dashboard-title
		 (mf-dashboard-center-line mf-dashboard-title)
		 (insert (format "%s\n\n" (propertize mf-dashboard-title 'face 'mf-dashboard-logo-title)))))

	 (defun mf-dashboard-insert-init-info ()
	   "Insert init info"
	   (interactive)
	   (let* ((init-time (emacs-init-time "%.2f seconds"))
			  (info (format "Emacs ready in %s with %d garbage collections" (propertize init-time 'face 'font-lock-keyword-face) gcs-done))
			  (buffer-read-only nil))
		 (mf-dashboard-center-line info)
		 (insert info)))

	 (add-hook 'window-setup-hook
			   (lambda()
				 (add-hook 'window-size-change-functions 'mf-dashboard-resize-on-hook)
				 (mf-dashboard-resize-on-hook)))

	 (defun mf-dashboard-refresh-buffer ()
	   "Refresh dashboard buffer"
	   (interactive)
	   (switch-to-buffer mf-dashboard-buffer-name))

	 (defun mf-dashboard-resize-on-hook (&optional _)
	   "Re-render dashboard buffer on window size change."
	   (let ((space-win (get-buffer-window mf-dashboard-buffer-name))
			 (frame-win (frame-selected-window)))
		 (when (and space-win
					(not (window-minibuffer-p frame-win)))
		   (with-selected-window space-win
			 (mf-dashboard-init)))))

		  ;;;autoload
	 (defun mf-dashboard-setup-startup-hook ()
	   "Setup post initialization hooks.
		  If a command line argument is provided, assume a filename and
		  skip displaying the dashboard."
	   (add-hook 'after-init-hook (lambda ()
									(mf-dashboard-init)))
	   (add-hook 'emacs-startup-hook (lambda()
									   (switch-to-buffer mf-dashboard-buffer-name)
									   (goto-char (point-min))
									   (redisplay)
									   (run-hooks 'mf-dashboard-after-initialize-hook))))

	 (provide 'mf-dashboard)
		  ;;; mf-dashboard.el ends here
   #+end_src
** Autoload macro
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
  (defmacro mf/autoload-func (&rest body)
	`(unless
		 (fboundp #',(plist-get body :func))
	   (autoload #',(plist-get body :func) ,(plist-get body :file) nil t)))
#+end_src
* mf-config.el
Load the actual config
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
  (require 'mf-config)
#+end_src
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  ;;; mf-config.el --- Load configuration modules -*- lexical-binding: t
  ;;; Code
#+end_src
** mf-exwm.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-exwm)
#+end_src
*** Display battery
 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-exwm.el")
  ;;; mf-exwm.el --- EXWM configuration -*- lexical-binding: t -*-
  ;;; Code:
  (display-battery-mode)
 #+end_src
*** Display time
	#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-exwm.el")
	  (setq display-time-default-load-average nil
			display-time-format "%H:%M")
	  (display-time-mode)
	#+end_src
*** Helper functions
 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-exwm.el")
	  (defun mf/exwm--update-class()
		(exwm-workspace-rename-buffer exwm-class-name))

	  (defun mf/manage--window-by-class()
		(pcase exwm-class-name
		  ("Firefox" (exwm-workspace-move-window 1))
		  ("mpv" (unless mini-modeline-mode
				   exwm-layout-toggle-mode-line))))

	  (defun mf/volume (action)
		(interactive)
		(start-process-shell-command "amixer" nil (concat "amixer sset Master 5%" action)))
#+end_src
*** Configuration
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-exwm.el")
  (progn
	(mf/install exwm)
	(require 'exwm-config)
	(setq exwm-workspace-number 2
		  exwm-workspace-warp-cursor t
		  exwm-input-prefix-keys
		  '(?\C-x
			?\C-c
			?\C-u
			?\M-x
			?\C-.
			?\M-:
			?\C-h)
		  exwm-input-global-keys
		  `((,(kbd "s-r") . (lambda (command)
							  (interactive (list (read-shell-command "$ ")))
							  (start-process-shell-command command nil command)))
			(,(kbd "s-C-r") . exwm-reset)
			(,(kbd "s-<return>") . (lambda ()
									 (interactive)
									 (start-process-shell-command "st" nil "st")))
			(,(kbd "<XF86AudioRaiseVolume>") . (lambda()
												 (interactive)
												 (mf/volume "+")))
			(,(kbd "<XF86AudioLowerVolume>") . (lambda()
												 (interactive)
												 (mf/volume "-")))
			(,(kbd "s--") . (lambda()
							  (interactive)
							  (mf/volume "-")))
			(,(kbd "s-+") . (lambda()
							  (interactive)
							  (mf/volume "+")))
			(,(kbd "s-)") . (lambda () (interactive) (exwm-workspace-move-window 0)))
			(,(kbd "s-!") . (lambda () (interactive) (exwm-workspace-move-window 1)))

			,@(mapcar (lambda (i)
						`(,(kbd (format "s-%d" i)) .
						  (lambda ()
							(interactive)
							(exwm-workspace-switch-create ,i))))
					  (number-sequence 0 1)))
		  exwm-input-simulation-keys
		  '((,(kbd "C-b") . [left])
			(,(kbd "C-f") . [right])
			(,(kbd "C-p") . [up])
			(,(kbd "C-n") . [down])
			(,(kbd "C-a") . [home])
			(,(kbd "C-e") . [end])
			(,(kbd "M-v") . [prior])
			(,(kbd "C-v") . [next])
			(,(kbd "C-d") . [delete])
			(,(kbd "C-k") . [S-end delete]))
		  exwm-layout-show-all-buffers t
		  exwm-workspace-show-all-buffers t)
	(define-key exwm-mode-map (kbd "C-q") #'exwm-input-send-next-key)
	(add-hook 'exwm-update-class-hook 'mf/exwm--update-class)
	(add-hook 'exwm-manage-finish-hook #'mf/manage--window-by-class)
	(add-hook 'exwm-floating-setup-hook #'exwm-layout-toggle-mode-line)
	(add-hook 'exwm-init-hook
			  (lambda ()
				(exwm-randr-refresh)
				(exwm-workspace-switch 1)
				(switch-to-buffer "*scratch*")))
	(require 'exwm-randr)
	(setq exwm-randr-workspace-output-plist '(1 "VGA1"))
	(add-hook 'exwm-randr-screen-change-hook
			  (lambda()
				(start-process-shell-command
				 "xrandr" nil "xrandr --output VGA1 --left-of LVDS1 --auto")))
	(exwm-randr-enable)
	(exwm-enable))

  (provide 'mf-exwm)
	  ;;; mf-exwm.el ends here
  #+end_src
*** Sxrc
	Shell script that runs at Xorg activation (using =sx=).
	#+begin_src shell :tangle (if (eq exwm-state 1) (file-truename "~/.xinitrc") no) :tangle-mode (if (eq exwm-state 1) (identity #o755) (identity #o664))
	  #!/bin/sh
	  setxkbmap dvorak
	  xmodmap ~/.Xmodmap
	  export _JAVA_AWT_WM_NONREPARENTING=1
	  exec emacs -mm --debug-init
    #+end_src
*** Xmodmap
	Switch Caps_Lock and Left_Control keys to prevent the =Emacs' pinky=.
	#+begin_src fundamental :tangle (if (eq exwm-state 1) (file-truename "~/.Xmodmap") no)
	  !
	  ! Swap Caps_Lock and Control_L
	  !
	  remove Lock = Caps_Lock
	  remove Control = Control_L
	  remove Control = Caps_Lock
	  remove Lock = Control_L
	  keysym Control_L =Caps_Lock
	  keysym Caps_Lock = Control_L
	  add Lock = Caps_Lock
	  add Control = Control_L
	#+end_src
** mf-autoloads.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-autoloads)
#+end_src
Define a macro to help autoloading
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-autoloads.el")
 ;;; mf-autoloads.el --- List of autoloads for custom Elisp modules -*- lexical-binding: t -*-
 ;;; Code:
 (defmacro mf/my-func-autoload (func)
   `(unless
	   (fboundp #',func)
	 (autoload #',func "mf-functions" nil t)))
#+end_src
Define some autoloads for functions defined in =mf-functions.el=
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-autoloads.el")
 (mf/my-func-autoload mf/big-font)
 (mf/my-func-autoload mf/delete-sexp)
 (mf/my-func-autoload mf/edit-configuration)
 (mf/my-func-autoload mf/ensure-package)
 (mf/my-func-autoload mf/eww)
 (mf/my-func-autoload mf/infos)
 (mf/my-func-autoload mf/find-recentf)
 (mf/my-func-autoload mf/quit-and-kill)
 (mf/my-func-autoload mf/reload-configuration)
 (mf/my-func-autoload mf/select-completion-and-exit)
 (mf/my-func-autoload mf/switch-theme)
 (mf/my-func-autoload mf/toggle-eshell)
 (mf/my-func-autoload mf/youtube)

 (provide 'mf-autoloads)
 ;;; mf-autoloads.el ends here
 #+end_src
** mf-mpc.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-mpc)
#+end_src
Configure the mpc music player (built-in).
Rewrite mpc function to respect display-buffer-alist
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-mpc.el")
 ;;; mf-mpc.el --- Configuration for mpc.el -*- lexical-binding: t -*-
 ;;; Code:
 (mf/autoload-func
  :func mpc
  :file "mpc")
 (eval-after-load 'mpc
   '(progn
	  (message "Loaded mpc")
	  (setq mpc-browser-tags '(Album|Playlist))
	  (define-key mpc-tagbrowser-mode-map (kbd "a") #'mpc-playlist-add)
	  (define-key mpc-mode-map (kbd "k") #'mpc-stop)
	  (define-key mpc-mode-map (kbd "n") #'next-line)
	  (define-key mpc-mode-map (kbd "p") #'previous-line)
	  (define-key mpc-mode-map (kbd "SPC") #'mpc-toggle-play)
	  (define-key mpc-mode-map (kbd "+") #'mpc-next)
	  (define-key mpc-mode-map (kbd "-") #'mpc-prev)
	  (defun mf/mpc (orig-func)
		(interactive
		 (progn
		   (if current-prefix-arg
			   (setq mpc-host (read-string
							   (format-prompt "MPD host and port" mpc-host)
							   nil nil mpc-host)))
		   nil))
		(with-current-buffer
			(current-buffer)
		  (setq-local mpc-previous-window-config
					  (current-window-configuration)))
		(let* ((tags mpc-browser-tags)
			   (win (pop-to-buffer (mpc-songs-buf) nil)))
		  (unless tags (error "Need at least one entry in `mpc-browser-tags'"))
		  (while
			  (progn
				(pop-to-buffer (mpc-tagbrowser-buf (pop tags)) nil)
				tags)))
		(mpc-songs-refresh))
	  (advice-add 'mpc :around #'mf/mpc)))

 (provide 'mf-mpc)
 ;;; mf-mpc.el ends here
#+end_src
** mf-erc.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-erc)
#+end_src
Configure erc, the built-in IRC client
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-erc.el")
  ;;; mf-erc.el --- Configuration for ERC -*- lexical-binding: t -*-
  ;;; Code:
  (progn
	(mf/autoload-func
	 :func erc
	 :file "erc")
	(mf/autoload-func
	 :func erc-tls
	 :file "erc")
	(eval-after-load 'erc
	  '(progn
		 (message "Loaded erc")
		 (add-hook 'erc-mode-hook #'(lambda()
									  (whitespace-mode)
									  (whitespace-mode -1)))
		 (setq erc-autojoin-channels-alist
			   '(("irc.libera.chat" "#emacs")
				 ("localhost" "&bitlbee"))))))

  (provide 'mf-erc)
  ;;; mf-erc.el ends here
#+end_src
** mf-gnus.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-gnus)
#+end_src
Configure gnus, the built-in news reader
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-gnus.el")
 ;;; mf-gnus.el --- Configuration for gnus -*- lexical-binding: t -*-
 ;;; Code:
 (progn
   (mf/autoload-func
	:func gnus
	:file "gnus")
   (eval-after-load 'gnus
	 '(progn
		(setq gnus-select-method '(nntp "news.gwene.org"))
		(add-hook 'gnus-group-mode-hook 'gnus-topic-mode))))

 (provide 'mf-gnus)
 ;;; mf-gnus.el ends here
#+end_src
** mf-mu4e.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-mu4e)
#+end_src
Configure the mu4e mail-reader
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-mu4e.el")
 ;;; mf-mu4e.el --- My mu4e configuration -*- lexical-binding: t -*-
 ;;; Code:
 (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
 (mf/autoload-func
  :func mu4e
  :file "mu4e")
 (eval-after-load 'mu4e
   '(progn
	  (message "Mu4e loaded")
      (require 'smtpmail)
      (setq user-mail-address "mario.forzanini@studenti.unimi.it"
			user-full-name "Mario Forzanini"
			mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a mario.forzanini@studenti.unimi.it"
			mu4e-compose-signature
			(concat
			 "----------\n"
			 "Mario Forzanini\n"
			 "http://www.marioforzanini.com")
			message-send-mail-function 'smtpmail-send-it
			starttls-use-gnutls nil
			smtpmail-auth-credentials '(("smtp.unimi.it" 465 "mario.forzanini@studenti.unimi.it" nil))
			smtpmail-default-smtp-server "smtp.unimi.it"
			smtpmail-smtp-server "smtp.unimi.it"
			smtpmail-smtp-service 465
			smtpmail-stream-type 'ssl
			mu4e-sent-folder "/Sent"
			mu4e-drafts-folder "/Drafts"
			mu4e-trash-folder "/Trash"
			mu4e-headers-date-format "%d/%m/%Y"
			mu4e-date-format-long "%d/%m/%Y"
			mu4e-change-filenames-when-moving t)
	  (add-to-list 'mu4e-bookmarks
				   '(:name "Uni"
						   :key ?U
						   :query "from:unimi.it AND to:mario.forzanini@studenti.unimi.it OR from:mario.forzanini@studenti.unimi.it AND to:unimi.it"))
	  (add-to-list 'mu4e-bookmarks
				   '(:name "Traccia"
						   :key ?T
						   :query "from:latracciabg.it OR to:latracciabg.it"))
	  (add-to-list 'mu4e-bookmarks
				   '(:name "9front"
						   :key ?9
						   :query "from:9front.org OR to:9front.org"))
	  (define-key mu4e-main-mode-map (kbd "n") #'next-line)
	  (define-key mu4e-main-mode-map (kbd "p") #'previous-line)
	  (define-key mu4e-headers-mode-map (kbd "C-. .") 'mu4e-org-store-and-capture)
	  (define-key mu4e-view-mode-map (kbd "C-. .") 'mu4e-org-store-and-capture)))

 (provide 'mf-mu4e)
 ;;; mf-mu4e.el ends here
 #+end_src
** mf-completion.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-completion)
#+end_src
Configure the completion framework
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-completion.el")
	;;; mf-completion.el --- Configuration for the completion framework -*- lexical-binding: t -*-
	;;; Code:
  (setq tab-always-indent 'complete)
  (autoload 'ffap-file-at-point "ffap")
  (defun complete-path-at-point+ ()
	"Return completion data for UNIX path at point."
	(let ((fn (ffap-file-at-point))
		  (fap (thing-at-point 'filename)))
	  (when (and (or fn (equal "/" fap))
				 (save-excursion
				   (search-backward fap (line-beginning-position) t)))
		(list (match-beginning 0)
			  (match-end 0)
			  #'completion-file-name-table :exclusive 'no))))
  (add-hook 'completion-at-point-functions
			#'complete-path-at-point+
			'append)

  (setq completion-styles '(substring partial-completion initials flex)
		completion-category-overrides
		'((file (styles partial-completion initials basic))))
#+end_src
*** Vertico
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-completion.el")
  (mf/install vertico)
  (eval-after-load 'minibuffer
	'(progn
	   (message "Loaded vertico")
	   (vertico-mode 1)))
#+end_src
*** Company
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-completion.el")
  (mf/install company)
  (mf/autoload-func
   :func company-mode
   :file "company")
  (progn
	(eval-after-load 'company
	  '(progn
		 (message "Company loaded")
		 (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
		 (setq company-minimum-prefix-length 3
			   company-idle-delay nil)
		 (eval-after-load 'yasnippet
			  '(define-key company-mode-map (kbd "<backtab>") 'company-yasnippet))))))

  (provide 'mf-completion)
  ;;; mf-completion.el ends here
  #+end_src
** mf-org.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-org)
#+end_src
*** Org mode
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-org.el")
  ;;; mf-org.el --- My configuration for Org mode and Org Roam -*- lexical-binding: t -*-
  ;;; Code:
  ;; Org mode
  (progn
	(mf/autoload-func
	 :func org-mode
	 :file "org-mode")
	(mf/autoload-func
	 :func org-capture
	 :file "org-mode")
	(mf/autoload-func
	 :func org-agenda
	 :file "org-mode")
	(eval-after-load 'org
	  '(progn
		 (message "Loaded org-mode")
		 (require 'org-tempo)
		 (setq org-archive-location "~/Documents/Personal/agenda.org::* Archive"
			   org-agenda-window-setup 'other-window
			   org-agenda-restore-windows-after-quit nil
			   org-agenda-sticky nil
			   org-agenda-skip-archived-trees t
			   org-agenda-start-with-log-mode t
			   org-agenda-include-diary t
			   org-log-done 'time
			   org-log-into-drawer t
			   org-capture-templates
			   '(("a" "Agenda" entry
				  (file+headline "~/Documents/Personal/agenda.org" "Agenda")
				  "** TODO %^{Action}\nSCHEDULED: %^t\n%?")
				 ("t" "Teaching")
				 ("tt" "Teaching General" entry
				  (file+headline "~/Documents/Personal/Notes/20210913174909-teaching.org" "Agenda")
				  "** TODO %^{Action}\n%?\n%a")
				 ("tb" "CBI" entry
				  (file+headline "~/Documents/Personal/Notes/20210921201618-cbi2021.org" "Agenda")
				  "** TODO %^{Action}\n%?\n%a")
				 ("tp" "CPA" entry
				  (file+headline "~/Documents/Personal/Notes/20210921201649-cpa2021.org" "Agenda")
				  "** TODO %^{Action}\n%?\n%a")
				 ("u" "Uni" entry
				  (file+headline "~/Documents/Personal/agenda.org" "Uni")
				  "*** TODO %^{Action}\n%?\n%a"))
			   org-todo-keywords
			   '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "NO(n)"))
			   org-todo-keyword-faces
			   '(("TODO" . org-todo)
				 ("WAITING" . (:inherit org-todo :foreground "#b0b0b0"))
				 ("DONE" . org-done)
				 ("NO" . error))
			   org-use-fast-todo-selection 'expert
			   org-agenda-custom-commands
			   '(("a" "Agenda for current week or day"
				  ((agenda "")
				   (todo))))
			   org-confirm-babel-evaluate nil
			   org-html-doctype "html4-strict"
			   org-html-head ""
			   org-html-head-extra ""
			   org-html-head-include-default-style nil
			   org-html-head-include-scripts nil
			   org-html-preamble nil
			   org-html-postamble nil
			   org-html-use-infojs nil)
		 (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
		 (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
		 (add-to-list 'org-structure-template-alist '("go" . "src go"))
		 (add-to-list 'org-structure-template-alist '("sc" . "src c"))
		 (add-to-list 'org-structure-template-alist '("scp" . "src c++"))
		 (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
		 (mf/install ob-go)
		 (org-babel-do-load-languages
		  'org-babel-load-languages
		  '((emacs-lisp . t)
			(shell . t)
			(awk . t)
			(go . t)
			(C . t)))

		 ;; I like my display-buffer-alist and would like it to be respected
		 (defun mf/switch-to-buffer-other-window (orig-func &rest args)
		   (apply #'switch-to-buffer-other-window args))
		 (advice-add 'org-agenda-get-restriction-and-command :around #'mf/org-agenda-get-restriction-and-command)
		 (advice-add 'org-switch-to-buffer-other-window :around #'mf/switch-to-buffer-other-window))))

  (setq diary-file (file-truename "~/Documents/Personal/diary"))
#+end_src
** mf-hacks.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-hacks)
#+end_src
Hack =org-agenda-dispatcher= behaviour to make it respect =display-buffer-alist=
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-hacks.el")
	;;; mf-hacks.el --- Ugly solutions to problems -*- lexical-binding: t -*-
	;;; Code:
  (eval-after-load 'org-agenda
	'(defun mf/org-agenda-get-restriction-and-command (orig-func prefix-descriptions)
	   "The user interface for selecting an agenda command. Fixed when the agenda buffer is displayed in a side window. "
	   (catch 'exit
		 (let* ((bfn (buffer-file-name (buffer-base-buffer)))
				(restrict-ok (and bfn (derived-mode-p 'org-mode)))
				(region-p (org-region-active-p))
				(custom org-agenda-custom-commands)
				(selstring "")
				restriction second-time
				c entry key type match prefixes rmheader header-end custom1 desc
				line lines left right n n1)
		   (save-window-excursion
			 ;; (delete-other-windows) ; Fix showing agenda in side window
			 (switch-to-buffer-other-window " *Agenda Commands*")
			 (erase-buffer)
			 (insert (eval-when-compile
					   (let ((header
							  (copy-sequence
							   "Press key for an agenda command:
	--------------------------------        <   Buffer, subtree/region restriction
	a   Agenda for current week or day      >   Remove restriction
	t   List of all TODO entries            e   Export agenda views
	m   Match a TAGS/PROP/TODO query        T   Entries with special TODO kwd
	s   Search for keywords                 M   Like m, but only TODO entries
	/   Multi-occur                         S   Like s, but only TODO entries
	?   Find :FLAGGED: entries              C   Configure custom agenda commands
	,*   Toggle sticky agenda views          #   List stuck projects (!=configure)
	"))
							 (start 0))
						 (while (string-match
								 "\\(^\\|   \\|(\\)\\(\\S-\\)\\( \\|=\\)"
								 header start)
						   (setq start (match-end 0))
						   (add-text-properties (match-beginning 2) (match-end 2)
												'(face bold) header))
						 header)))
			 (setq header-end (point-marker))
			 (while t
			   (setq custom1 custom)
			   (when (eq rmheader t)
				 (org-goto-line 1)
				 (re-search-forward ":" nil t)
				 (delete-region (match-end 0) (point-at-eol))
				 (forward-char 1)
				 (looking-at "-+")
				 (delete-region (match-end 0) (point-at-eol))
				 (move-marker header-end (match-end 0)))
			   (goto-char header-end)
			   (delete-region (point) (point-max))

			   ;; Produce all the lines that describe custom commands and prefixes
			   (setq lines nil)
			   (while (setq entry (pop custom1))
				 (setq key (car entry) desc (nth 1 entry)
					   type (nth 2 entry)
					   match (nth 3 entry))
				 (if (> (length key) 1)
					 (cl-pushnew (string-to-char key) prefixes :test #'equal)
				   (setq line
						 (format
						  "%-4s%-14s"
						  (org-add-props (copy-sequence key)
							  '(face bold))
						  (cond
						   ((string-match "\\S-" desc) desc)
						   ((eq type 'agenda) "Agenda for current week or day")
						   ((eq type 'agenda*) "Appointments for current week or day")
						   ((eq type 'alltodo) "List of all TODO entries")
						   ((eq type 'search) "Word search")
						   ((eq type 'stuck) "List of stuck projects")
						   ((eq type 'todo) "TODO keyword")
						   ((eq type 'tags) "Tags query")
						   ((eq type 'tags-todo) "Tags (TODO)")
						   ((eq type 'tags-tree) "Tags tree")
						   ((eq type 'todo-tree) "TODO kwd tree")
						   ((eq type 'occur-tree) "Occur tree")
						   ((functionp type) (if (symbolp type)
												 (symbol-name type)
											   "Lambda expression"))
						   (t "???"))))
				   (cond
					((not (org-string-nw-p match)) nil)
					(org-agenda-menu-show-matcher
					 (setq line
						   (concat line ": "
								   (cond
									((stringp match)
									 (propertize match 'face 'org-warning))
									((listp type)
									 (format "set of %d commands" (length type)))))))
					(t
					 (org-add-props line nil 'help-echo (concat "Matcher: " match))))
				   (push line lines)))
			   (setq lines (nreverse lines))
			   (when prefixes
				 (mapc (lambda (x)
						 (push
						  (format "%s   %s"
								  (org-add-props (char-to-string x)
									  nil 'face 'bold)
								  (or (cdr (assoc (concat selstring
														  (char-to-string x))
												  prefix-descriptions))
									  "Prefix key"))
						  lines))
					   prefixes))

			   ;; Check if we should display in two columns
			   (if org-agenda-menu-two-columns
				   (progn
					 (setq n (length lines)
						   n1 (+ (/ n 2) (mod n 2))
						   right (nthcdr n1 lines)
						   left (copy-sequence lines))
					 (setcdr (nthcdr (1- n1) left) nil))
				 (setq left lines right nil))
			   (while left
				 (insert "\n" (pop left))
				 (when right
				   (if (< (current-column) 40)
					   (move-to-column 40 t)
					 (insert "   "))
				   (insert (pop right))))

			   ;; Make the window the right size
			   (goto-char (point-min))
			   (if second-time
				   (when (not (pos-visible-in-window-p (point-max)))
					 (org-fit-window-to-buffer))
				 (setq second-time t)
				 (org-fit-window-to-buffer))

			   ;; Hint to navigation if window too small for all information
			   (setq header-line-format
					 (when (not (pos-visible-in-window-p (point-max)))
					   "Use C-v, M-v, C-n or C-p to navigate."))

			   ;; Ask for selection
			   (cl-loop
				do (progn
					 (message "Press key for agenda command%s:"
							  (if (or restrict-ok org-agenda-overriding-restriction)
								  (if org-agenda-overriding-restriction
									  " (restriction lock active)"
									(if restriction
										(format " (restricted to %s)" restriction)
									  " (unrestricted)"))
								""))
					 (setq c (read-char-exclusive)))
				until (not (memq c '(14 16 22 134217846)))
				do (org-scroll c))

			   (message "")
			   (cond
				((assoc (char-to-string c) custom)
				 (setq selstring (concat selstring (char-to-string c)))
				 (throw 'exit (cons selstring restriction)))
				((memq c prefixes)
				 (setq selstring (concat selstring (char-to-string c))
					   prefixes nil
					   rmheader (or rmheader t)
					   custom (delq nil (mapcar
										 (lambda (x)
										   (if (or (= (length (car x)) 1)
												   (/= (string-to-char (car x)) c))
											   nil
											 (cons (substring (car x) 1) (cdr x))))
										 custom))))
				((eq c ?*)
				 (call-interactively 'org-toggle-sticky-agenda)
				 (sit-for 2))
				((and (not restrict-ok) (memq c '(?1 ?0 ?<)))
				 (message "Restriction is only possible in Org buffers")
				 (ding) (sit-for 1))
				((eq c ?1)
				 (org-agenda-remove-restriction-lock 'noupdate)
				 (setq restriction 'buffer))
				((eq c ?0)
				 (org-agenda-remove-restriction-lock 'noupdate)
				 (setq restriction (if region-p 'region 'subtree)))
				((eq c ?<)
				 (org-agenda-remove-restriction-lock 'noupdate)
				 (setq restriction
					   (cond
						((eq restriction 'buffer)
						 (if region-p 'region 'subtree))
						((memq restriction '(subtree region))
						 nil)
						(t 'buffer))))
				((eq c ?>)
				 (org-agenda-remove-restriction-lock 'noupdate)
				 (setq restriction nil))
				((and (equal selstring "") (memq c '(?s ?S ?a ?t ?m ?L ?C ?e ?T ?M ?# ?! ?/ ??)))
				 (throw 'exit (cons (setq selstring (char-to-string c)) restriction)))
				((and (> (length selstring) 0) (eq c ?\d))
				 (delete-window)
				 (org-agenda-get-restriction-and-command prefix-descriptions))

				((equal c ?q) (user-error "Abort"))
				(t (user-error "Invalid key %c" c)))))))))

  (eval-after-load 'ox
	'(defun org-export--dispatch-ui (options first-key expertp)
	   "Handle interface for `org-export-dispatch'.

  OPTIONS is a list containing current interactive options set for
  export.  It can contain any of the following symbols:
  `body'    toggles a body-only export
  `subtree' restricts export to current subtree
  `visible' restricts export to visible part of buffer.
  `force'   force publishing files.
  `async'   use asynchronous export process

  FIRST-KEY is the key pressed to select the first level menu.  It
  is nil when this menu hasn't been selected yet.

  EXPERTP, when non-nil, triggers expert UI.  In that case, no help
  buffer is provided, but indications about currently active
  options are given in the prompt.  Moreover, [?] allows switching
  back to standard interface."
	   (let* ((fontify-key
			   (lambda (key &optional access-key)
				 ;; Fontify KEY string.  Optional argument ACCESS-KEY, when
				 ;; non-nil is the required first-level key to activate
				 ;; KEY.  When its value is t, activate KEY independently
				 ;; on the first key, if any.  A nil value means KEY will
				 ;; only be activated at first level.
				 (if (or (eq access-key t) (eq access-key first-key))
					 (propertize key 'face 'org-warning)
				   key)))
			  (fontify-value
			   (lambda (value)
				 ;; Fontify VALUE string.
				 (propertize value 'face 'font-lock-variable-name-face)))
			  ;; Prepare menu entries by extracting them from registered
			  ;; back-ends and sorting them by access key and by ordinal,
			  ;; if any.
			  (entries
			   (sort (sort (delq nil
								 (mapcar #'org-export-backend-menu
										 org-export-registered-backends))
						   (lambda (a b)
							 (let ((key-a (nth 1 a))
								   (key-b (nth 1 b)))
							   (cond ((and (numberp key-a) (numberp key-b))
									  (< key-a key-b))
									 ((numberp key-b) t)))))
					 'car-less-than-car))
			  ;; Compute a list of allowed keys based on the first key
			  ;; pressed, if any.  Some keys
			  ;; (?^B, ?^V, ?^S, ?^F, ?^A, ?&, ?# and ?q) are always
			  ;; available.
			  (allowed-keys
			   (nconc (list 2 22 19 6 1)
					  (if (not first-key) (org-uniquify (mapcar 'car entries))
						(let (sub-menu)
						  (dolist (entry entries (sort (mapcar 'car sub-menu) '<))
							(when (eq (car entry) first-key)
							  (setq sub-menu (append (nth 2 entry) sub-menu))))))
					  (cond ((eq first-key ?P) (list ?f ?p ?x ?a))
							((not first-key) (list ?P)))
					  (list ?& ?#)
					  (when expertp (list ??))
					  (list ?q)))
			  ;; Build the help menu for standard UI.
			  (help
			   (unless expertp
				 (concat
				  ;; Options are hard-coded.
				  (format "[%s] Body only:    %s           [%s] Visible only:     %s
  \[%s] Export scope: %s       [%s] Force publishing: %s
  \[%s] Async export: %s\n\n"
						  (funcall fontify-key "C-b" t)
						  (funcall fontify-value
								   (if (memq 'body options) "On " "Off"))
						  (funcall fontify-key "C-v" t)
						  (funcall fontify-value
								   (if (memq 'visible options) "On " "Off"))
						  (funcall fontify-key "C-s" t)
						  (funcall fontify-value
								   (if (memq 'subtree options) "Subtree" "Buffer "))
						  (funcall fontify-key "C-f" t)
						  (funcall fontify-value
								   (if (memq 'force options) "On " "Off"))
						  (funcall fontify-key "C-a" t)
						  (funcall fontify-value
								   (if (memq 'async options) "On " "Off")))
				  ;; Display registered back-end entries.  When a key
				  ;; appears for the second time, do not create another
				  ;; entry, but append its sub-menu to existing menu.
				  (let (last-key)
					(mapconcat
					 (lambda (entry)
					   (let ((top-key (car entry)))
						 (concat
						  (unless (eq top-key last-key)
							(setq last-key top-key)
							(format "\n[%s] %s\n"
									(funcall fontify-key (char-to-string top-key))
									(nth 1 entry)))
						  (let ((sub-menu (nth 2 entry)))
							(unless (functionp sub-menu)
							  ;; Split sub-menu into two columns.
							  (let ((index -1))
								(concat
								 (mapconcat
								  (lambda (sub-entry)
									(cl-incf index)
									(format
									 (if (zerop (mod index 2)) "    [%s] %-26s"
									   "[%s] %s\n")
									 (funcall fontify-key
											  (char-to-string (car sub-entry))
											  top-key)
									 (nth 1 sub-entry)))
								  sub-menu "")
								 (when (zerop (mod index 2)) "\n"))))))))
					 entries ""))
				  ;; Publishing menu is hard-coded.
				  (format "\n[%s] Publish
	  [%s] Current file              [%s] Current project
	  [%s] Choose project            [%s] All projects\n\n\n"
						  (funcall fontify-key "P")
						  (funcall fontify-key "f" ?P)
						  (funcall fontify-key "p" ?P)
						  (funcall fontify-key "x" ?P)
						  (funcall fontify-key "a" ?P))
				  (format "[%s] Export stack                  [%s] Insert template\n"
						  (funcall fontify-key "&" t)
						  (funcall fontify-key "#" t))
				  (format "[%s] %s"
						  (funcall fontify-key "q" t)
						  (if first-key "Main menu" "Exit")))))
			  ;; Build prompts for both standard and expert UI.
			  (standard-prompt (unless expertp "Export command: "))
			  (expert-prompt
			   (when expertp
				 (format
				  "Export command (C-%s%s%s%s%s) [%s]: "
				  (if (memq 'body options) (funcall fontify-key "b" t) "b")
				  (if (memq 'visible options) (funcall fontify-key "v" t) "v")
				  (if (memq 'subtree options) (funcall fontify-key "s" t) "s")
				  (if (memq 'force options) (funcall fontify-key "f" t) "f")
				  (if (memq 'async options) (funcall fontify-key "a" t) "a")
				  (mapconcat (lambda (k)
							   ;; Strip control characters.
							   (unless (< k 27) (char-to-string k)))
							 allowed-keys "")))))
		 ;; With expert UI, just read key with a fancy prompt.  In standard
		 ;; UI, display an intrusive help buffer.
		 (if expertp
			 (org-export--dispatch-action
			  expert-prompt allowed-keys entries options first-key expertp)
		   ;; At first call, create frame layout in order to display menu.
		   (unless (get-buffer "*Org Export Dispatcher*")
			 ;; (delete-other-windows)
			 (org-switch-to-buffer-other-window
			  (get-buffer-create "*Org Export Dispatcher*"))
			 (setq cursor-type nil
				   header-line-format "Use SPC, DEL, C-n or C-p to navigate.")
			 ;; Make sure that invisible cursor will not highlight square
			 ;; brackets.
			 (set-syntax-table (copy-syntax-table))
			 (modify-syntax-entry ?\[ "w"))
		   ;; At this point, the buffer containing the menu exists and is
		   ;; visible in the current window.  So, refresh it.
		   (with-current-buffer "*Org Export Dispatcher*"
			 ;; Refresh help.  Maintain display continuity by re-visiting
			 ;; previous window position.
			 (let ((pt (point))
				   (wstart (window-start)))
			   (erase-buffer)
			   (insert help)
			   (goto-char pt)
			   (set-window-start nil wstart)))
		   (org-fit-window-to-buffer)
		   (org-export--dispatch-action
			standard-prompt allowed-keys entries options first-key expertp)))))

  (provide 'mf-hacks)
	;;; mf-hacks.el ends here
#+end_src
** mf-programming.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-programming)
#+end_src
Configure programming experience
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-programming.el")
;;; mf-programming.el --- My configuration for programming languages that I use
;;; Code:
#+end_src
*** Lisp
**** Slime repls
	 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-programming.el")
	   (mf/install slime)
	   (setq inferior-lisp-program "sbcl")
	   (eval-after-load 'slime
		 '(progn
			(add-hook 'slime-repl-mode 'paredit-mode)
			(message "Loaded slime")))
	 #+end_src
**** Paredit
	 #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-programming.el")
	   (mf/install paredit)
	   (add-hook 'lisp-mode-hook #'paredit-mode)
	   (eval-after-load 'paredit
		 '(progn
			(message "Loaded paredit")
			(eval-after-load 'slime
			  '(add-hook 'slime-repl-mode #'paredit-mode))))
	 #+end_src
*** C
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-programming.el")
   (add-hook 'c-mode-hook #'(lambda()
							  (c-set-style "k&r")))
#+end_src
*** Flymake
	#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-programming.el")
	  (mf/install flymake)
	  (eval-after-load 'flymake
		'(progn
		   (message "Loaded flymake")
		   (add-hook 'flymake-mode-hook #'flymake-show-diagnostics-buffer)))
	#+end_src
*** Yasnippet
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-programming.el")
;; Yasnippet
   (mf/install yasnippet)
   (mf/autoload-func
	:func yas-minor-mode
	:file "yasnippet")
   (eval-after-load 'yasnippet
	 '(progn
		(setq yas-snippet-dirs '("~/.emacs.d/snippets"))))
#+end_src
** mf-dired.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
  (require 'mf-dired)
#+end_src
Configure dired, use =dired-filter= to give dired filtering
capabilities similar to those of ibuffer
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-dired.el")
  ;;; mf-dired.el --- My dired configuration -*- lexical-binding: t -*-
  ;;;Code:
  (eval-after-load 'dired
	'(progn
	   (message "Loaded dired-mode")
	   (setq dired-kill-when-opening-new-dired-buffer t)
	   (add-hook 'dired-mode-hook 'dired-hide-details-mode)
	   (define-key dired-mode-map (kbd "q") #'(lambda() (interactive (quit-window t))))))

  (provide 'mf-dired)
  ;;; mf-dired.el ends here
#+end_src
** mf-git.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-dired.el")
;;  (require 'mf-git)
#+end_src
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-git.el")
  ;;; mf-git.el --- Git workflow configuration -*- lexical-binding: t -*-
  ;;; Code:
  (mf/install magit)
  (progn
	(mf/autoload-func
	 :func magit
	 :file "magit")
	(mf/autoload-func
	 :func magit-status
	 :file "magit")
	(eval-after-load 'magit
	  '(message "Loaded magit")))

  (provide 'mf-git)
  ;;; mf-git.el ends here
#+end_src
** mf-pass.el
   #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
;;	 (require 'mf-pass)
   #+end_src
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-pass.el")
  ;;; mf-pass.el --- Configuration for the emacs frontend to GNU pass -*- lexical-binding: t -*-
  ;;; Code:
	 (mf/install password-store)
	 (progn
	   (mf/autoload-func
		:func password-store-copy
		:file "password-store")
	   (mf/autoload-func
		:func password-store-insert
		:file "password-store")
	   (mf/autoload-func
		:func password-store-generate
		:file "password-store")
	   (eval-after-load 'password-store
		 '(progn
			(message "Loaded password-store")
			(require 'epa-file)
			(setq epa-pinentry-mode 'loopback))))

  (provide 'mf-pass)
  ;;; mf-pass.el ends here
 #+end_src
** mf-ibuffer.el
   #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
	 (require 'mf-ibuffer)
   #+end_src
	#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-ibuffer.el")
	  ;;; mf-ibuffer.el --- Configuration for iBuffer -*- lexical-binding: t -*-
	  ;;; Code:
	  (eval-after-load 'ibuffer
		'(progn
		   (setq ibuffer-saved-filter-groups
				 '(("default"
					("EXWM" (mode . exwm-mode))
					("Programming" (derived-mode . prog-mode))
					("Mail" (derived-mode . mu4e-compose-mode))
					("Org" (name . "^.*org$"))
					("Org-roam" (name . "[0-9]+-.*.org"))
					("Shell" (or (mode . eshell-mode) (name . "^st-256color")))
					("PDF" (name . "^.*pdf$"))
					("IRC" (mode . erc-mode))
					("Man" (name . "\\*Man "))
					("Magit" (derived-mode . magit-mode))
					("Dired" (mode . dired-mode))
					("Web" (or (mode . eww-mode) (name . "^Firefox")))
					("Emacs" (or (name . "\\*scratch\\*")
								 (name . "\\*Messages\\*")
								 (name . "\\*dashboard\\*")
								 (name . "\\*Completions\\*")
								 (name . "\\*Warnings\\*")
								 (name . "\\*Backtrace\\*")))
					("Compilation" (derived-mode . compilation-mode))))

				 ibuffer-show-empty-filter-groups nil
				 ibuffer-expert t)
		   (eval-after-load 'org-agenda
			 '(setq ibuffer-saved-filter-groups
					'(("default"
					   ("EXWM" (mode . exwm-mode))
					   ("Programming" (derived-mode . prog-mode))
					   ("Mail" (derived-mode . mu4e-compose-mode))
					   ("Agenda" (or (name . "diary")
									 (name . "agenda.org")
									 (name . "\\*Org Agenda\\*")
									 (predicate -contains-p org-agenda-files (buffer-file-name))))
					   ("Org" (name . "^.*org$"))
					   ("Org-roam" (name . "[0-9]+-.*.org"))
					   ("Shell" (or (mode . eshell-mode) (name . "^st-256color")))
					   ("PDF" (name . "^.*pdf$"))
					   ("IRC" (mode . erc-mode))
					   ("Man" (name . "\\*Man "))
					   ("Magit" (derived-mode . magit-mode))
					   ("Dired" (mode . dired-mode))
					   ("Web" (or (mode . eww-mode) (name . "^Firefox")))
					   ("Emacs" (or (name . "\\*scratch\\*")
									(name . "\\*Messages\\*")
									(name . "\\*dashboard\\*")
									(name . "\\*Completions\\*")
									(name . "\\*Warnings\\*")
									(name . "\\*Backtrace\\*")))
					   ("Compilation" (derived-mode . compilation-mode))))))
			 (add-hook 'ibuffer-mode-hook
					   (lambda ()
						 (ibuffer-auto-mode 1)
						 (ibuffer-switch-to-saved-filter-groups "default")))))

		(provide 'mf-ibuffer)
	  ;;; mf-ibuffer.el ends here
	#+end_src
** mf-keybindings.el
=mf-keybindings= has to be loaded after everything else, it needs some
autoloads to be defined
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
	 (require 'mf-keybindings)
#+end_src
Configure global keybindings
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-keybindings.el")
  ;; mf-keybindings.el --- Keybinding configuration -*- lexical-binding: t -*-
  ;;; Code:
  (defmacro mf/leader (key func)
	`(define-key global-map (kbd (concat "C-. " ,key)) #',func))

  (mf/leader "C-." execute-extended-command)
  (mf/leader "," comment-line)
  (mf/leader "'" jump-to-register)
  (mf/leader "/" eww)
  (mf/leader "RET" mf/toggle-eshell)
  (mf/leader "b" switch-to-buffer)
  (mf/leader "c" compile)
  (mf/leader "d" dired)
  (mf/leader "e" erc)
  (mf/leader "f" find-file)
  (mf/leader "g" magit-status)
  (mf/leader "i" mf/infos)
  (mf/leader "j" bookmark-jump)
  (mf/leader "k" kill-current-buffer)
  (mf/leader "m" mu4e)
  (mf/leader "o" other-window)
  (mf/leader "p" mpc)
  (mf/leader "r" point-to-register)
  (mf/leader "s" query-replace-regexp)
  (mf/leader "t" mf/switch-theme)
  (mf/leader "w" window-configuration-to-register)
  (mf/leader "y" mf/youtube)
  (mf/leader "0" delete-window)
  (mf/leader "1" delete-other-windows)
  (mf/leader "2" split-window-below)
  (mf/leader "3" split-window-right)
  (mf/leader "4 f" find-file-other-window)
  (mf/leader "4 b" switch-to-buffer-other-window)
  (mf/leader "4 d" dired-other-window)
  (mf/leader "4 C-f" find-file-other-window)
  (mf/leader "4 C-b" switch-to-buffer-other-window)
  (mf/leader "4 C-d" dired-other-window)
  (mf/leader "C-b" (lambda() (interactive) (ibuffer t)))
  (mf/leader "C-f" find-file)
  (mf/leader "C-s" save-buffer)

  ;; Org
  (mf/leader "." org-capture)
  (mf/leader "a" org-agenda)
  (mf/leader "n f" org-roam-node-find)
  (mf/leader "n i" org-roam-node-insert)
  (mf/leader "n t" mf/org-roam-find-teaching)

  (define-key global-map (kbd "C-x C-b") (lambda () (interactive) (ibuffer t)))
  ;; Quit help buffers and kill the window at the same time
  (eval-after-load 'help-mode
	'(define-key help-mode-map (kbd "q") #'kill-current-buffer))

  (define-key lisp-mode-map (kbd "C-M-d") #'mf/delete-sexp)

  (provide 'mf-keybindings)
  ;;; mf-keybindings.el ends here
 #+end_src
** mf-telega.el
   #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
;;	 (require 'mf-telega)
   #+end_src
   #+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-telega.el")
	 ;;; mf-telega.el --- Configuration for telega -*- lexical-binding: t -*-
	 ;;; Code:
	 (mf/install telega)
	 (mf/autoload-func
	  :func telega
	  :file "telega")
	 (setq telega-chat-show-avatars nil
		   telega-root-show-avatars nil
		   telega-user-show-avatars nil)

	 (provide 'mf-telega)
	 ;;; mf-telega.el ends here
   #+end_src
** mf-functions.el
Custom functions
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-functions.el")
 ;;; mf-functions.el --- My custom functions -*- lexical-binding: t -*-
 ;;; Code:

 ;;;###autoload
 (defun mf/big-font(&optional use-generic-p)
   (interactive "P")
   (if use-generic-p
	   (text-scale-decrease 4)
	 (text-scale-increase 4)))

 ;;;###autoload
 (defun mf/delete-sexp()
   (interactive)
   (mark-sexp)
   (delete-active-region))

 ;;;###autoload
 (defun mf/edit-configuration()
   "Edit emacs configuration"
   (interactive)
   (find-file (concat user-emacs-directory "Emacs.el")))

 ;;;###autoload
 (defun mf/ensure-package(pack)
   (unless
	   (package-installed-p pack)
	 (package-install pack)))

 ;;;###autoload
 (defun mf/eww ()
   (interactive)
   (with-temp-buffer
	 (insert-file-contents "~/.local/share/bookmarks.txt")
	 (let* ((links (buffer-string))
			(bookmarks (split-string links)))
	   (eww (completing-read "URL: " bookmarks)))))

 ;;;###autoload
 (defun mf/find-recentf()
   "Open a recent file list"
   (interactive)
   (find-file (completing-read "Recent File: " recentf-list nil t)))

 ;;;###autoload
 (defun mf/infos()
   (interactive)
   (shell-command (executable-find "infos")))

 ;;;###autoload
 (defun mf/quit-and-kill()
   (interactive)
   (quit-window t))

 ;;;###autoload
 (defun mf/reload-configuration()
   "Reloads configuration"
   (interactive)
   (load-file (concat user-emacs-directory "init.el")))

 ;;;###autoload
 (defun mf/select-completion-and-exit()
   (interactive)
   (icomplete-force-complete)
   (icomplete-ret))

 ;;;###autoload
 (defun mf/switch-theme ()
   (interactive)
   (if (string= (car custom-enabled-themes) "mf")
	   (progn
		 (load-theme 'mf-dark t)
		 (disable-theme 'mf))
	 (progn
	   (load-theme 'mf)
	   (disable-theme 'mf-dark))))

 ;;;###autoload
 (defun mf/toggle-eshell (&optional use-generic-p)
   "Toggle eshell window respecting buffer-alist configuration.
 If there is a prefix argument, switch to the eshell buffer."
   (interactive "P")
   (if (get-buffer-window "*eshell*")
	   (delete-window (get-buffer-window "*eshell*"))
	 (if use-generic-p
		 (progn
		   (eshell)
		   (delete-window (get-buffer-window "*eshell*"))
		 (switch-to-buffer "*eshell*"))
	   (eshell))))

 (defun mf/yank-to-string()
   (rotate-yank-pointer 0)
   (car kill-ring-yank-pointer))

 ;;;###autoload
 (defun mf/mpv(&optional url)
   "Plays url in mpv"
   (interactive)
   (if (called-interactively-p)
	   (let ((url (mf/yank-to-string)))
		 (start-process-shell-command "mpv" nil (concat "mpv " url)))
	 (start-process-shell-command "mpv" nil (concat "mpv --ytdl-format='bestvideo[height<=1080]+bestaudio/best' " url))))

 ;;;###autoload
 (defun mf/youtube(title)
   (interactive (list (read-string "Query: ")))
   (let* ((json (shell-command-to-string (concat "echo " title " | eyt")))
		  (resp-plist (json-parse-string json :object-type 'plist))
		  (videos (plist-get resp-plist :videos))
		  (ids (seq-map (lambda (vid)
						  (format "%s -$- %s"
								  (plist-get vid :title)
								  (plist-get vid :id)))
						videos))
		  (chosen-id (cdr (split-string (completing-read "Title: " ids) " -$- " t)))
		  (url (concat "https://www.youtube.com/watch?v=" (car chosen-id))))
	 (mf/mpv url)))

 (provide 'mf-functions)
 ;;; mf-functions.el ends here
 #+end_src

** Startup time
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/mf-config.el")
	  ;; Startup time and garbage collection
	  (add-hook 'emacs-startup-hook
				(lambda ()
				  (message "Emacs ready in %s with %d garbage collections"
						   (format "%.2f seconds"
								   (float-time
									(time-subtract after-init-time before-init-time)))
						   gcs-done)))

	  (provide 'mf-config)
	;;; mf-config.el ends here
#+end_src
** Manage garbage collection
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "init.el")
  (mf/install gcmh)
  (gcmh-mode 1)
  ;;; init.el ends here
#+end_src
* Themes
** mf-theme.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/themes/mf-theme.el")
  ;;; mf-theme.el --- A bright Emacs 24 theme for your focused hacking sessions during the day

  ;; Copyright (C) 2011-2014 Xavier Noria
  ;; Copyright (C) 2021 Mario Forzanini
  ;;
  ;; Author: Xavier Noria <fxn@hashref.com>
  ;; Author: Mario Forzanini <mario.forzanini@studenti.unimi.it>
  ;;
  ;; Just throw this file into ~/.emacs.d and
  ;;
  ;; M-x load-theme RET mf RET
  ;;
  ;; or put in your init file
  ;;
  ;; (load-theme 'mf)
  ;;
  ;; This theme is based on monochrome-bright theme.
  ;;
  ;; Works with Emacs 28.

  (deftheme mf
	"Black on white theme4 for your focused hacking sessions during the day.")

  (custom-theme-set-faces 'mf
						  '(default ((t (:foreground "black" :background "white"))))
						  '(cursor ((t (:background "black"))))

						  ;; Highlighting faces
						  '(fringe ((t (:foreground "black" :background "white"))))
						  '(highlight ((t (:foreground "black" :background "#e0e0e0"))))
						  '(hl-line ((t (:background "#e0e0e0"))))
						  '(isearch ((t (:foreground "#f0f0f0" :background "#006800"))))
						  '(lazy-highlight ((t (:foreground "white" :background "#303030"))))
						  '(linum ((t (:foreground "#303030" :slant italic))))
						  '(match ((t (:background "green"))))
						  '(region ((t (:extend t :foreground "black" :background "#bcbcbc"))))
						  '(secondary-selection ((t (:foreground: "black" :background "#e0e0e0"))))
						  '(trailing-whitespace ((t (:background "red"))))

						  ;; Button and link faces
						  '(link ((t (:underline t :foreground "#303030"))))
						  '(link-visited ((t (:underline t :foreground "#303030"))))

						  ;; Company
						  '(company-scrollbar-bg ((t (:background "white"))))
						  '(company-scrollbar-fg ((t (:foreground "black"))))
						  '(company-tooltip-annotation ((t (:foreground "#b0b0b0"))))
						  '(company-tooltip-common ((t (:foreground "black" :weight semi-bold))))
						  '(company-tooltip-selection ((t (:foreground "black" :background "#808080"))))

						  ;; Corfu
						  '(corfu-current ((t (:foreground "black" :background "#b3b3b3"))))
						  '(corfu-bar ((t (:background "black"))))
						  '(corfu-background ((t (:background "white"))))
						  '(corfu-border ((t (:background "#b3b3b3"))))

						  ;; Erc
						  '(erc-current-nick-face ((t (:foreground "black" :weight bold))))
						  '(erc-error-face ((t (:inherit error))))
						  '(erc-keyword-face ((t (:foreground "black" :underline t :weight bold))))
						  '(erc-my-nick-face ((t (:inherit erc-current-nick-face))))
						  '(erc-notice-face ((t (:foreground "#b0b0b0" :weight bold))))
						  '(erc-prompt-face ((t (:foreground "Black" :underline t :weight bold))))
						  '(erc-timestamp-face ((t (:foreground "#b0b0b0" :weight bold))))

						  ;; Escape and prompt faces
						  '(minibuffer-prompt ((t (:weight bold :foreground "#303030"))))
						  '(escape-glyph ((t (:foreground "#303030"))))
						  '(error ((t (:weight bold :slant italic :foreground "#900000"))))
						  '(warning ((t (:background "#b0b0b0" :foreground "black"))))
						  '(success ((t (:background "#303030" :foreground "green"))))

						  ;; EShell
						  '(eshell-prompt ((t (:foreground "black" :bold t))))
						  '(eshell-ls-archive ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-backup ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-clutter ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-directory ((t (:foreground "#303030" :bold t))))
						  '(eshell-ls-executable ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-missing ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-product ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-readonly ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-special ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-symlink ((t (:inherit eshell-ls-unreadable))))

						  ;; Font lock faces
						  '(font-lock-builtin-face ((t (:foreground "#303030"))))
						  '(font-lock-comment-face ((t (:slant italic :foreground "#b3b3b3"))))
						  '(font-lock-constant-face ((t (:weight bold :foreground "#303030"))))
						  '(font-lock-function-name-face ((t (:foreground "black" :weight semi-bold))))
						  '(font-lock-keyword-face ((t (:weight bold :foreground "black"))))
						  '(font-lock-string-face ((t (:foreground "#808080"))))
						  '(font-lock-type-face ((t (:weight bold :foreground "#303030"))))
						  '(font-lock-variable-name-face ((t (:weight bold :foreground "#808080" :slant oblique))))
						  '(font-lock-warning-face ((t (:foreground "#b0b0b0" :underline (:color foreground-color :style wave)))))

						  ;; Gnus faces
						  '(gnus-group-news-1 ((t (:weight bold :foreground "#303030"))))
						  '(gnus-group-news-1-low ((t (:foreground "#303030"))))
						  '(gnus-group-news-2 ((t (:weight bold :foreground "#303030"))))
						  '(gnus-group-news-2-low ((t (:foreground "#303030"))))
						  '(gnus-group-news-3 ((t (:weight bold :foreground "#303030"))))
						  '(gnus-group-news-3-low ((t (:foreground "#303030"))))
						  '(gnus-group-news-4 ((t (:weight bold :foreground "#303030"))))
						  '(gnus-group-news-4-low ((t (:foreground "#303030"))))
						  '(gnus-group-news-5 ((t (:weight bold :foreground "#b3b3b3"))))
						  '(gnus-group-news-5-low ((t (:foreground "#b3b3b3"))))
						  '(gnus-group-news-low ((t (:foreground "#303030"))))
						  '(gnus-group-mail-1 ((t (:weight bold :foreground "#303030"))))
						  '(gnus-group-mail-1-low ((t (:foreground "#303030"))))
						  '(gnus-group-mail-2 ((t (:weight bold :foreground "#303030"))))
						  '(gnus-group-mail-2-low ((t (:foreground "#303030"))))
						  '(gnus-group-mail-3 ((t (:weight bold :foreground "#303030"))))
						  '(gnus-group-mail-3-low ((t (:foreground "#303030"))))
						  '(gnus-group-mail-low ((t (:foreground "#303030"))))
						  '(gnus-header-content ((t (:foreground "#303030"))))
						  '(gnus-header-from ((t (:weight bold :foreground "#303030"))))
						  '(gnus-header-subject ((t (:foreground "#303030"))))
						  '(gnus-header-name ((t (:foreground "#303030"))))
						  '(gnus-header-newsgroups ((t (:foreground "#303030"))))

						  ;; helm
						  '(helm-header ((t (:foreground "#303030" :background "white" :underline nil :box nil))))
						  '(helm-source-header
							((t (:foreground "#303030"
											 :underline nil
											 :weight bold
											 :box (:line-width 1 :style released-button)))))
						  '(helm-selection ((t (:underline t :foreground "#303030"))))
						  '(helm-visible-mark ((t (:foreground "#303030" :background "white"))))
						  '(helm-candidate-number ((t (:foreground "#303030" :background "white"))))
						  '(helm-separator ((t (:foreground "#303030" :background "white"))))
						  '(helm-time-zone-current ((t (:foreground "#303030" :background "white"))))
						  '(helm-time-zone-home ((t (:foreground "#303030" :background "white"))))
						  '(helm-bookmark-addressbook ((t (:foreground "#303030" :background "white"))))
						  '(helm-bookmark-directory ((t (:foreground nil :background nil :inherit helm-ff-directory))))
						  '(helm-bookmark-file ((t (:foreground nil :background nil :inherit helm-ff-file))))
						  '(helm-bookmark-gnus ((t (:foreground "#303030" :background "white"))))
						  '(helm-bookmark-info ((t (:foreground "#303030" :background "white"))))
						  '(helm-bookmark-man ((t (:foreground "#303030" :background "white"))))
						  '(helm-bookmark-w3m ((t (:foreground "#303030" :background "white"))))
						  '(helm-buffer-not-saved ((t (:foreground "#303030" :background "white"))))
						  '(helm-buffer-process ((t (:foreground "#303030" :background "white"))))
						  '(helm-buffer-saved-out ((t (:foreground "#303030" :background "white"))))
						  '(helm-buffer-size ((t (:foreground "#303030" :background "white"))))
						  '(helm-ff-directory ((t (:foreground "#303030" :background "white" :weight bold))))
						  '(helm-ff-file ((t (:foreground "#303030" :background "white" :weight normal))))
						  '(helm-ff-executable ((t (:foreground "#303030" :background "white" :weight normal))))
						  '(helm-ff-invalid-symlink ((t (:foreground "white" :background "white" :weight bold))))
						  '(helm-ff-symlink ((t (:foreground "#303030" :background "white" :weight bold))))
						  '(helm-ff-prefix ((t (:foreground "#303030" :background "white" :weight normal))))
						  '(helm-grep-cmd-line ((t (:foreground "#303030" :background "white"))))
						  '(helm-grep-file ((t (:foreground "#303030" :background "white"))))
						  '(helm-grep-finish ((t (:foreground "#303030" :background "white"))))
						  '(helm-grep-lineno ((t (:foreground "#303030" :background "white"))))
						  '(helm-grep-match ((t (:foreground nil :background nil :inherit helm-match))))
						  '(helm-grep-running ((t (:foreground "#303030" :background "white"))))
						  '(helm-moccur-buffer ((t (:foreground "#303030" :background "white"))))
						  '(helm-mu-contacts-address-face ((t (:foreground "#303030" :background "white"))))
						  '(helm-mu-contacts-name-face ((t (:foreground "#303030" :background "white"))))

						  ;; ido
						  '(ido-first-match ((t (:foreground "#303030"))))
						  '(ido-only-match ((t (:underline "#303030" :foreground "#303030"))))
						  '(ido-subdir ((t (:weight bold :foreground "black"))))

						  ;; Magit
						  '(magit-branch-remote ((t (:foreground "black" :underline t :slant oblique))))
						  '(magit-section-heading ((t (:extend t :foreground "black" :weight bold))))

						  ;; Message faces
						  '(message-header-name ((t (:foreground "#303030"))))
						  '(message-header-cc ((t (:foreground "#303030"))))
						  '(message-header-other ((t (:foreground "#303030"))))
						  '(message-header-subject ((t (:foreground "#303030"))))
						  '(message-header-to ((t (:weight bold :foreground "#303030"))))
						  '(message-header-xheader ((t (:slant oblique :foreground "#303030"))))
						  '(message-cited-text ((t (:inherit shadow))))
						  '(message-cited-text-1 ((t (:inherit message-cited-text))))
						  '(message-cited-text-2 ((t (:inherit message-cited-text))))
						  '(message-cited-text-3 ((t (:inherit message-cited-text))))
						  '(message-cited-text-4 ((t (:inherit message-cited-text))))
						  '(message-separator ((t (:weight bold :foreground "#303030"))))

						  ;; Minibuffer
						  '(minibuffer-prompt ((t (:foreground "black" :weight bold))))
						  '(completions-common-part ((t (:foreground "black" :weight bold))))
						  '(completions-first-difference ((t (:underline "black" :weight semi-bold))))

						  ;; Mini-modeline
						  ;; Mini- modeline
						  '(mini-modeline-mode-line ((t (:height 0.14 :background "black"))))
						  '(mini-modeline-mode-line-inactive ((t (:height 0.14 :background "white"))))

						  ;; Mode line faces
						  '(mode-line ((t (:background "#e0e0e0" :foreground "#303030"
													   :box (:line-width 4 :color "#e0e0e0" :style flat-button)))))
						  '(mode-line-inactive ((t (:background "white" :foreground "#808080"
																:box (:line-width 4 :color "white" :style flat-button)))))

						  ;; MuMaMo
						  '(mumamo-background-chunk-major ((t (:background "white"))))
						  '(mumamo-background-chunk-submode1 ((t (:background "white"))))
						  '(mumamo-background-chunk-submode2 ((t (:background "white"))))
						  '(mumamo-background-chunk-submode3 ((t (:background "white"))))
						  '(mumamo-background-chunk-submode4 ((t (:background "white"))))
						  '(mumamo-border-face-in ((t (:slant unspecified :underline unspecified
															  :weight bold :foreground "black"))))
						  '(mumamo-border-face-out ((t (:slant unspecified :underline unspecified
															   :weight bold :foreground "black"))))

						  ;; Notmuch
						  '(notmuch-search-date ((t (:foreground "black" :slant oblique :weight normal))))
						  '(notmuch-search-matching-authors ((t (:foreground "black" :weight semi-bold))))
						  '(notmuch-search-subject ((t (:foreground "black" :weight light))))
						  '(notmuch-search-unread-face ((t (:inherit bold :underline t))))
						  '(notmuch-tag-added ((t (:underline "black"))))
						  '(notmuch-tag-face ((t (:inherit shadow :foreground "#505050" :weight normal))))
						  '(notmuch-tag-unread ((t (:foreground "black" :weight bold))))
						  '(notmuch-tree-match-author-face ((t (:foreground "black" :weight semi-bold))))
						  '(notmuch-tree-match-tag-face ((t (:foreground "black" :weight bold))))

						  ;; Orderless
						  '(orderless-match-face-0 ((t (:foreground "black" :weight bold))))
						  '(orderless-match-face-1 ((t (:inherit orderless-match-face-0))))
						  '(orderless-match-face-2 ((t (:inherit orderless-match-face-0))))
						  '(orderless-match-face-3 ((t (:inherit orderless-match-face-0))))
						  '(orderless-match-face-4 ((t (:inherit orderless-match-face-0))))

						  ;; Org-mode
						  '(org-agenda-done ((t (:foreground "ForestGreen" :underline t :slant oblique :weight bold))))
						  '(org-agenda-structure ((t (:foreground "black"))))
						  '(org-block ((t (:inherit shadow :extend t :background "#eeeeee"))))
						  '(org-document-info ((t (:foreground "black"))))
						  '(org-document-title ((t (:foreground "black" :weight bold))))
						  '(org-done ((t (:foreground "green" :underline t :slant oblique :weight bold))))
						  '(org-headline-done ((t (:extend t))))
						  '(org-level-1 ((t (:bold t :foreground "#303030" :height 1.5))))
						  '(org-level-2 ((t (:extend nil :foreground "black" :weight normal :height 1.2))))
						  '(org-level-3 ((t (:extend nil :foreground "black" :weight bold :height 1.0))))
						  '(org-level-4 ((t (:extend nil :foreground "black" :weight normal :height 1.0))))
						  '(org-link ((t (:foreground "#606060" :underline t :slant oblique))))
						  '(org-scheduled ((t (:foreground "black" :slant oblique))))
						  '(org-table ((t (:foreground "black"))))
						  '(org-table-header ((t (:inherit org-table :foreground "Black" :weight semi-bold))))
						  '(org-time-grid ((t (:foreground "#a0a0a0"))))
						  '(org-todo ((t (:foreground "black" :underline t :slant oblique :weight bold))))
						  '(org-upcoming-deadline ((t (:foreground "black" :weight semi-bold))))

						  ;; Org-roam
						  '(org-roam-preview-heading ((t (:inherit org-block))))
						  '(org-roam-preview-heading-highlight ((t (:inherit org-roam-preview-heading))))

						  ;; Show-paren
						  '(show-paren-match ((t (:background "#303030"))))
						  '(show-paren-mismatch ((t (:background "red"))))

						  ;; Speedbar
						  '(speedbar-button-face ((t (:foreground "#b3b3b3"))))
						  '(speedbar-file-face ((t (:foreground "#303030"))))
						  '(speedbar-directory-face ((t (:weight bold :foreground "black"))))
						  '(speedbar-tag-face ((t (:foreground "#b3b3b3"))))
						  '(speedbar-selected-face ((t (:underline "#b3b3b3" :foreground "#303030"))))
						  '(speedbar-highlight-face ((t (:weight bold :background "white" :foreground "black"))))

						  ;; Whitespace-mode
						  '(whitespace-empty ((t (:background unspecified :foreground "red"))))
						  '(whitespace-line ((t (:background "#b3b3b3" :foreground "black"))))
						  '(whitespace-trailing ((t (:background "red1")))))

  (provide-theme 'mf)

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; End:

  ;;; mf-theme.el ends here
#+end_src
** mf-dark-theme.el
#+begin_src emacs-lisp :tangle (concat user-emacs-directory "mf-lisp/themes/mf-dark-theme.el")
  ;;; mf-dark-theme.el --- A bright Emacs 24 theme for your focused hacking sessions during the day

  ;; Copyright (C) 2011-2014 Xavier Noria
  ;; Copyright (C) 2021 Mario Forzanini
  ;;
  ;; Author: Xavier Noria <fxn@hashref.com>
  ;; Author: Mario Forzanini <mario.forzanini@studenti.unimi.it>
  ;;
  ;; Just throw this file into ~/.emacs.d and
  ;;
  ;; M-x load-theme RET mf-dark RET
  ;;
  ;; or put in your init file
  ;;
  ;; (load-theme 'mf-dark t)
  ;;
  ;; This theme is based on monochrome theme.
  ;;
  ;; Works with Emacs 28.

  (deftheme mf-dark
	"White on black theme4 for your focused hacking sessions during the night.")

  (custom-theme-set-faces 'mf-dark
						  '(default ((t (:foreground "white" :background "black"))))
						  '(cursor ((t (:background "white"))))

						  ;; Highlighting faces
						  '(bookmark-face ((t (:foreground "black" :background "#cccccc"))))
						  '(fringe ((t (:foreground "white" :background "black"))))
						  '(highlight ((t (:foreground "white" :background "#1e1e1e"))))
						  '(hl-line ((t (:background "#303030"))))
						  '(isearch ((t (:foreground "#f0f0f0" :background "#006800"))))
						  '(lazy-highlight ((t (:foreground "black" :background "#303030"))))
						  '(linum ((t (:foreground "#f0f0f0" :slant italic))))
						  '(match ((t (:background "green"))))
						  '(region ((t (:extend t :foreground "white" :background "#505050"))))
						  '(secondary-selection ((t (:foreground: "white" :background "#303030"))))
						  '(trailing-whitespace ((t (:background "red"))))

						  ;; Button and link faces
						  '(link ((t (:underline t :foreground "#bababa"))))
						  '(link-visited ((t (:underline t :foreground "#bababa"))))

						  ;; Company
						  '(company-scrollbar-bg ((t (:background "black"))))
						  '(company-scrollbar-fg ((t (:foreground "white"))))
						  '(company-tooltip-annotation ((t (:foreground "#b0b0b0"))))
						  '(company-tooltip-common ((t (:foreground "white" :weight semi-bold))))
						  '(company-tooltip-selection ((t (:foreground "white" :background "#808080"))))

						  ;; Corfu
						  '(corfu-current ((t (:foreground "white" :background "#b3b3b3"))))
						  '(corfu-bar ((t (:background "white"))))
						  '(corfu-background ((t (:background "black"))))
						  '(corfu-border ((t (:background "#b3b3b3"))))

						  ;; Erc
						  '(erc-current-nick-face ((t (:foreground "white" :weight bold))))
						  '(erc-error-face ((t (:inherit error))))
						  '(erc-keyword-face ((t (:foreground "white" :underline t :weight bold))))
						  '(erc-my-nick-face ((t (:inherit erc-current-nick-face))))
						  '(erc-notice-face ((t (:foreground "#b0b0b0" :weight bold))))
						  '(erc-prompt-face ((t (:foreground "white" :underline t :weight bold))))
						  '(erc-timestamp-face ((t (:foreground "#b0b0b0" :weight bold))))

						  ;; Escape and prompt faces
						  '(minibuffer-prompt ((t (:weight bold :foreground "#bababa"))))
						  '(escape-glyph ((t (:foreground "#bababa"))))
						  '(error ((t (:weight bold :slant italic :foreground "#900000"))))
						  '(warning ((t (:foreground "white" :background "black" :inherit font-lock-warning-face))))
						  '(success ((t (:foreground "green"))))

						  ;; EShell
						  '(eshell-prompt ((t (:foreground "white" :bold t))))
						  '(eshell-ls-archive ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-backup ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-clutter ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-directory ((t (:foreground "#bababa" :bold t))))
						  '(eshell-ls-executable ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-missing ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-product ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-readonly ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-special ((t (:inherit eshell-ls-unreadable))))
						  '(eshell-ls-symlink ((t (:inherit eshell-ls-unreadable))))

						  ;; Font lock faces
						  '(font-lock-builtin-face ((t (:foreground "#bababa"))))
						  '(font-lock-comment-face ((t (:slant italic :foreground "#b3b3b3"))))
						  '(font-lock-constant-face ((t (:weight bold :foreground "#bababa"))))
						  '(font-lock-function-name-face ((t (:foreground "white" :weight semi-bold))))
						  '(font-lock-keyword-face ((t (:weight bold :foreground "white"))))
						  '(font-lock-string-face ((t (:foreground "#808080"))))
						  '(font-lock-type-face ((t (:weight bold :foreground "#bababa"))))
						  '(font-lock-variable-name-face ((t (:weight bold :foreground "#808080" :slant oblique))))
						  '(font-lock-warning-face ((t (:foreground "#b0b0b0" :underline (:color foreground-color :style wave)))))

						  ;; Gnus faces
						  '(gnus-group-news-1 ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-group-news-1-low ((t (:foreground "#bababa"))))
						  '(gnus-group-news-2 ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-group-news-2-low ((t (:foreground "#bababa"))))
						  '(gnus-group-news-3 ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-group-news-3-low ((t (:foreground "#bababa"))))
						  '(gnus-group-news-4 ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-group-news-4-low ((t (:foreground "#bababa"))))
						  '(gnus-group-news-5 ((t (:weight bold :foreground "#b3b3b3"))))
						  '(gnus-group-news-5-low ((t (:foreground "#b3b3b3"))))
						  '(gnus-group-news-low ((t (:foreground "#bababa"))))
						  '(gnus-group-mail-1 ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-group-mail-1-low ((t (:foreground "#bababa"))))
						  '(gnus-group-mail-2 ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-group-mail-2-low ((t (:foreground "#bababa"))))
						  '(gnus-group-mail-3 ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-group-mail-3-low ((t (:foreground "#bababa"))))
						  '(gnus-group-mail-low ((t (:foreground "#bababa"))))
						  '(gnus-header-content ((t (:foreground "#bababa"))))
						  '(gnus-header-from ((t (:weight bold :foreground "#bababa"))))
						  '(gnus-header-subject ((t (:foreground "#bababa"))))
						  '(gnus-header-name ((t (:foreground "#bababa"))))
						  '(gnus-header-newsgroups ((t (:foreground "#bababa"))))

						  ;; helm
						  '(helm-header ((t (:foreground "#bababa" :background "black" :underline nil :box nil))))
						  '(helm-source-header
							((t (:foreground "#bababa"
											 :underline nil
											 :weight bold
											 :box (:line-width 1 :style released-button)))))
						  '(helm-selection ((t (:underline t :foreground "#bababa"))))
						  '(helm-visible-mark ((t (:foreground "#bababa" :background "black"))))
						  '(helm-candidate-number ((t (:foreground "#bababa" :background "black"))))
						  '(helm-separator ((t (:foreground "#bababa" :background "black"))))
						  '(helm-time-zone-current ((t (:foreground "#bababa" :background "black"))))
						  '(helm-time-zone-home ((t (:foreground "#bababa" :background "black"))))
						  '(helm-bookmark-addressbook ((t (:foreground "#bababa" :Background "black"))))
						  '(helm-bookmark-directory ((t (:foreground nil :background nil :inherit helm-ff-directory))))
						  '(helm-bookmark-file ((t (:foreground nil :background nil :inherit helm-ff-file))))
						  '(helm-bookmark-gnus ((t (:foreground "#bababa" :background "black"))))
						  '(helm-bookmark-info ((t (:foreground "#bababa" :background "black"))))
						  '(helm-bookmark-man ((t (:foreground "#bababa" :background "black"))))
						  '(helm-bookmark-w3m ((t (:foreground "#bababa" :background "black"))))
						  '(helm-buffer-not-saved ((t (:foreground "#bababa" :background "black"))))
						  '(helm-buffer-process ((t (:foreground "#bababa" :background "black"))))
						  '(helm-buffer-saved-out ((t (:foreground "#bababa" :background "black"))))
						  '(helm-buffer-size ((t (:foreground "#bababa" :background "black"))))
						  '(helm-ff-directory ((t (:foreground "#bababa" :background "black" :weight bold))))
						  '(helm-ff-file ((t (:foreground "#bababa" :background "black" :weight normal))))
						  '(helm-ff-executable ((t (:foreground "#bababa" :background "black" :weight normal))))
						  '(helm-ff-invalid-symlink ((t (:foreground "black" :background "black" :weight bold))))
						  '(helm-ff-symlink ((t (:foreground "#bababa" :background "black" :weight bold))))
						  '(helm-ff-prefix ((t (:foreground "#bababa" :background "black" :weight normal))))
						  '(helm-grep-cmd-line ((t (:foreground "#bababa" :background "black"))))
						  '(helm-grep-file ((t (:foreground "#bababa" :background "black"))))
						  '(helm-grep-finish ((t (:foreground "#bababa" :background "black"))))
						  '(helm-grep-lineno ((t (:foreground "#bababa" :background "black"))))
						  '(helm-grep-match ((t (:foreground nil :background nil :inherit helm-match))))
						  '(helm-grep-running ((t (:foreground "#bababa" :background "black"))))
						  '(helm-moccur-buffer ((t (:foreground "#bababa" :background "black"))))
						  '(helm-mu-contacts-address-face ((t (:foreground "#bababa" :background "black"))))
						  '(helm-mu-contacts-name-face ((t (:foreground "#bababa" :background "black"))))

						  ;; ido
						  '(ido-first-match ((t (:foreground "#bababa"))))
						  '(ido-only-match ((t (:underline "#bababa" :foreground "#bababa"))))
						  '(ido-subdir ((t (:weight bold :foreground "white"))))

						  ;; Magit
						  '(magit-branch-remote ((t (:foreground "white" :underline t :slant oblique))))
						  '(magit-section-heading ((t (:extend t :foreground "white" :weight bold))))

						  ;; Message faces
						  '(message-header-name ((t (:foreground "#bababa"))))
						  '(message-header-cc ((t (:foreground "#bababa"))))
						  '(message-header-other ((t (:foreground "#bababa"))))
						  '(message-header-subject ((t (:foreground "#bababa"))))
						  '(message-header-to ((t (:weight bold :foreground "#bababa"))))
						  '(message-header-xheader ((t (:slant oblique :foreground "#bababa"))))
						  '(message-cited-text ((t (:inherit shadow))))
						  '(message-cited-text-1 ((t (:inherit message-cited-text))))
						  '(message-cited-text-2 ((t (:inherit message-cited-text))))
						  '(message-cited-text-3 ((t (:inherit message-cited-text))))
						  '(message-cited-text-4 ((t (:inherit message-cited-text))))
						  '(message-separator ((t (:weight bold :foreground "#bababa"))))

						  ;; Minibuffer
						  '(minibuffer-prompt ((t (:foreground "white" :weight bold))))
						  '(completions-common-part ((t (:foreground "white" :weight bold))))
						  '(completions-first-difference ((t (:underline "white" :weight semi-bold))))

						  ;; Mode line faces
						  '(mode-line ((t (:background "#1e1e1e" :foreground "white"
													   :box (:line-width 4 :color "#1e1e1e" :style flat-button)))))
						  '(mode-line-inactive ((t (:background "black" :foreground "#808080"
																:box (:line-width 4 :color "black")))))

						  ;; Mini- modeline
						  '(mini-modeline-mode-line ((t (:height 0.14 :background "white"))))
						  '(mini-modeline-mode-line-inactive ((t (:height 0.14 :background "black"))))

						  ;; MuMaMo
						  '(mumamo-background-chunk-major ((t (:background "black"))))
						  '(mumamo-background-chunk-submode1 ((t (:background "black"))))
						  '(mumamo-background-chunk-submode2 ((t (:background "black"))))
						  '(mumamo-background-chunk-submode3 ((t (:background "black"))))
						  '(mumamo-background-chunk-submode4 ((t (:background "black"))))
						  '(mumamo-border-face-in ((t (:slant unspecified :underline unspecified
															  :weight bold :foreground "white"))))
						  '(mumamo-border-face-out ((t (:slant unspecified :underline unspecified
															   :weight bold :foreground "white"))))

						  ;; Notmuch
						  '(notmuch-search-date ((t (:foreground "white" :slant oblique :weight normal))))
						  '(notmuch-search-matching-authors ((t (:foreground "white" :weight semi-bold))))
						  '(notmuch-search-subject ((t (:foreground "white" :weight light))))
						  '(notmuch-search-unread-face ((t (:inherit bold :underline t))))
						  '(notmuch-tag-added ((t (:underline "white"))))
						  '(notmuch-tag-face ((t (:inherit shadow :foreground "#505050" :weight normal))))
						  '(notmuch-tag-unread ((t (:foreground "white" :weight bold))))
						  '(notmuch-tree-match-author-face ((t (:foreground "white" :weight semi-bold))))
						  '(notmuch-tree-match-tag-face ((t (:foreground "white" :weight bold))))

						  ;; Orderless
						  '(orderless-match-face-0 ((t (:foreground "white" :underline t  :weight bold))))
						  '(orderless-match-face-1 ((t (:inherit orderless-match-face-0))))
						  '(orderless-match-face-2 ((t (:inherit orderless-match-face-0))))
						  '(orderless-match-face-3 ((t (:inherit orderless-match-face-0))))
						  '(orderless-match-face-4 ((t (:inherit orderless-match-face-0))))

						  ;; Org-mode
						  '(org-agenda-done ((t (:foreground "ForestGreen" :underline t :slant oblique :weight bold))))
						  '(org-agenda-structure ((t (:foreground "white"))))
						  '(org-block ((t (:inherit shadow :extend t :background "#1e1e1e"))))
						  '(org-date ((t (:underline t :foreground "#b0b0b0"))))
						  '(org-document-info ((t (:foreground "white"))))
						  '(org-document-title ((t (:foreground "white" :weight bold))))
						  '(org-done ((t (:foreground "green" :underline t :slant oblique :weight bold))))
						  '(org-headline-done ((t (:extend t))))
						  '(org-level-1 ((t (:bold t :foreground "#bababa" :height 1.5))))
						  '(org-level-2 ((t (:extend nil :foreground "white" :weight normal :height 1.2))))
						  '(org-level-3 ((t (:extend nil :foreground "white" :weight bold :height 1.0))))
						  '(org-level-4 ((t (:extend nil :foreground "white" :weight normal :height 1.0))))
						  '(org-link ((t (:foreground "#b0b0b0" :underline t :slant oblique))))
						  '(org-scheduled ((t (:foreground "white" :slant oblique))))
						  '(org-table ((t (:foreground "white"))))
						  '(org-table-header ((t (:inherit org-table :foreground "white" :weight semi-bold))))
						  '(org-time-grid ((t (:foreground "#a0a0a0"))))
						  '(org-todo ((t (:foreground "white" :underline t :slant oblique :weight bold))))
						  '(org-upcoming-deadline ((t (:foreground "white" :weight semi-bold))))

						  ;; Org-roam
						  '(org-roam-preview-heading ((t (:inherit org-block))))
						  '(org-roam-preview-heading-highlight ((t (:inherit org-roam-preview-heading))))

						  ;; Show-paren
						  '(show-paren-match ((t (:background "#a0a0a0"))))
						  '(show-paren-mismatch ((t (:background "red"))))

						  ;; Speedbar
						  '(speedbar-button-face ((t (:foreground "#b3b3b3"))))
						  '(speedbar-file-face ((t (:foreground "#bababa"))))
						  '(speedbar-directory-face ((t (:weight bold :foreground "white"))))
						  '(speedbar-tag-face ((t (:foreground "#b3b3b3"))))
						  '(speedbar-selected-face ((t (:underline "#b3b3b3" :foreground "#bababa"))))
						  '(speedbar-highlight-face ((t (:weight bold :background "black" :foreground "white"))))

						  ;; Whitespace-mode
						  '(whitespace-empty ((t (:background unspecified :foreground "red"))))
						  '(whitespace-line ((t (:background "#b3b3b3" :foreground "white"))))
						  '(whitespace-trailing ((t (:background "red1")))))

  (provide-theme 'mf-dark)

  ;; Local Variables:
  ;; no-byte-compile: t
  ;; End:

  ;;; mf-dark-theme.el ends here

#+end_src

#+TITLE: Emacs configuration
#+STARTUP: overview
#+AUTHOR: Mario Forzanini
#+HTML_HEAD: <link rel="stylesheet" href="style/simple.css">
* Look and Feel
** Icons
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package all-the-icons)
#+end_src
** Line numbers
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
      (column-number-mode)
      (global-display-line-numbers-mode t)
      (menu-bar--display-line-numbers-mode-relative)

      (dolist (mode '(term-mode-hook
                      completion-list-mode-hook
                      eshell-mode-hook
                      vterm-mode-hook
                      helpful-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Elisp parentheses
Use [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] for nice parentheses coloring
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package rainbow-delimiters
    :defer t
    :commands rainbow-delimiters-mode
    :hook
    (org-mode . rainbow-delimiters-mode)
    (prog-mode . rainbow-delimiters-mode))
#+end_src
** Layout
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (setq display-buffer-alist '(("\\*vterm\\*"  (display-buffer-in-side-window)
                                (side . bottom)
                                (window-height . 0.4))
                               ("\\*Packages\\*" (display-buffer-in-side-window)
                                (side . bottom)
                                (window-height . 0.4))
                               ("\\*WoMan" (display-buffer-in-side-window)
                                (side . bottom)
                                (window-height . 0.4))
                               ("\\*[Hh]elp" (display-buffer-in-side-window)
                                (side . bottom)
                                (window-height . 0.4))))
#+end_src
** Style
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (require 'whitespace)
  (setq whitespace-style '(face empty tabs line-tail trailing)
        whitespace-line-column 80)
  (global-whitespace-mode t)
#+end_src
* Keybindings
** Helper functions
#+begin_src emacs-lisp  :tangle ~/.emacs.d/Emacs.el
  (defun mf/reload-configuration ()
    "Reloads configuration"
    (interactive)
    (load-file (concat user-emacs-directory "init.el")))

  (defun mf/edit-configuration ()
    "Edit emacs configuration"
    (interactive)
    (find-file "~/.emacs.d/GNUEmacs.org"))

  (defun mf/find-recentf ()
    "Open a recent file"
    (interactive)
    (find-file (completing-read "Recent File: " recentf-list nil t)))

  (defun mf/toggle-vterm (&optional use-generic-p)
    "Toggle vterm window respecting buffer-alist configuration.
    If there is a prefix argument, switch to the vterm buffer."
    (interactive "P")
    (if (get-buffer-window "*vterm*")
        (delete-window (get-buffer-window "*vterm*"))
      (if use-generic-p
          (switch-to-buffer "*vterm*")
        (vterm))))
#+end_src
** Leader key
Use [[https://github.com/noctuid/general.el][general]] to setup ',' bar as leader key in normal mode, C-SPC in
other modes.
#+begin_src emacs-lisp  :tangle ~/.emacs.d/Emacs.el
  (use-package general
    :init
    (general-override-mode 1)
    :config
    (general-create-definer mf/leader-keys
      :prefix "C-.")
#+end_src
**** General definitions
Commonly used bindings for different purposes; Prefix: C-c
| Keybinding | Action              |
|------------+---------------------|
| SPC-b      | Buffers prefix      |
| SPC-f      | Files prefix        |
| SPC-h      | Help prefix         |
| SPC-i      | Insert prefix       |
| SPC-m      | Major mode prefix   |
| SPC-O      | Org prefix          |
| SPC-q      | Quit prefix         |
| SPC-q-q    | Exit Emacs          |
| SPC-w      | Window prefix       |
| SPC-/      | Music prefix        |
| SPC-SPC    | M-x                 |
#+begin_src emacs-lisp  :tangle ~/.emacs.d/Emacs.el
  (mf/leader-keys
    "a" '(:ignore t :which-key "Applications")
    "b" '(:ignore t :which-key "Buffers")
    "c" '(:ignore t :which-key "Code")
    "f" '(:ignore t :which-key "Files")
    "g" '(:ignore t :which-key "Git")
    "H" '(:ignore t :which-key "Help")
    "i" '(:ignore t :which-key "Insert")
    "j" '(:ignore t :which-key "Jump")
    "q" '(:ignore t :which-key "Quit")
    "t" '(:ignore t :which-key "Toggle")
    "w" '(:ignore t :which-key "Windows")
    "O" '(:ignore t :which-key "Org")

    "C-." '(execute-extended-command :which-key "M-x")
    "qq" '(save-buffers-kill-terminal :which-key "Exit Emacs")
    "o" '(delete-other-windows :which-key "Only!")
#+end_src
**** Buffer management
Quick bookmarks; Prefix: C-c-b
| Keybinding | Action        |
|------------+---------------|
| SPC-b-d    | Delete buffer |
| SPC-b-r    | Rename buffer |
#+begin_src emacs-lisp  :tangle ~/.emacs.d/Emacs.el
"b"  'switch-to-buffer
"C-b" 'list-buffers
"d"  'kill-current-buffer
#+end_src
**** Code
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/Emacs.el
"cc" 'compile
"ce" 'eval-buffer
"cr" 'recompile
"cE" 'eval-region
"c(" 'check-parens
#+END_SRC
**** File management
Movement in the filesystem; Prefix: C-c-f
| Keybinding | Action                   |
|------------+--------------------------|
| SPC-f-s    | Save buffer              |
| SPC-f-e    | Emacs prefix             |
| SPC-f-e-d  | Edit emacs configuration |
| SPC-f-e-R  | Reload emacs configuration |
#+begin_src emacs-lisp  :tangle ~/.emacs.d/Emacs.el
"fd" 'dired
"ff" 'find-file
"fe" '(:ignore t)
"fed" 'mf/edit-configuration
"feR" 'mf/reload-configuration
"fr" 'mf/find-recentf
"fs" 'save-buffer
#+end_src
**** Windows
    Manage windows; Prefix: SPC-w
| Keybinding | Action           |
|------------+------------------|
| SPC-h      | Focus left       |
| SPC-l      | Focus right      |
| SPC-j      | Focus down       |
| SPC-k      | Focus up         |
| SPC-w-c    | Close            |
| SPC-w-q    | Close            |
| SPC-w-v    | Vertical split   |
| SPC-w-s    | Horizontal split |
| SPC-w-m    | Maximize         |
| SPC-w-=    | Balance windows  |
| SPC-w-w    | Other-window     |
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/Emacs.el
"h" 'windmove-left
"l" 'windmove-right
"j" 'windmove-down
"k" 'windmove-up
"v" 'split-window-right
"s" 'split-window-below
"wc" 'delete-window
"wm" 'maximize-window
"wq" 'delete-window
"w=" 'balance-windows
  ))
#+END_SRC
* Completion framework
** Prescient
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package prescient
    :defer t
    :hook (minibuffer-inactive-mode-hook . prescient-persistent-mode))
#+end_src
** Use default minibuffer
   #+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package marginalia
    :init
    (marginalia-mode))
  (setq tab-always-indent 'complete)
  (autoload 'ffap-file-at-point "ffap")
  (defun complete-path-at-point+ ()
    "Return completion data for UNIX path at point."
    (let ((fn (ffap-file-at-point))
          (fap (thing-at-point 'filename)))
      (when (and (or fn (equal "/" fap))
                 (save-excursion
                   (search-backward fap (line-beginning-position) t)))
        (list (match-beginning 0)
              (match-end 0)
              #'completion-file-name-table :exclusive 'no))))

  (add-hook 'completion-at-point-functions
            #'complete-path-at-point+
            'append)
#+end_src
** Corfu
Use corfu for better completions at point
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package corfu
    :config (corfu-global-mode))
#+end_src
* Helpful
Use [[https://github.com/Wilfred/helpful][helpful]] to get better help, highlighting and references to the
source files
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package page-break-lines
    :defer t
    :commands page-break-lines-mode)

  (use-package helpful
    :defer t
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :hook
    (helpful-mode . page-break-lines-mode)
    (helpful-mode . visual-line-mode)
    :bind
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    ([remap describe-function] . helpful-function)
    (:map helpful-mode-map
          ("q" . mf/quit-and-kill)					; Quitting help buffer kills them too
          ("n" . next-line)
          ("p" . previous-line))
    :config
    (defun mf/quit-and-kill ()
      (interactive)
      (quit-window t)))
#+end_src
* Programming
** Projectile
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package projectile
    :defer t
    :commands projectile-mode
    :hook
    (c-mode . projectile-mode)
    (c++-mode . projectile-mode)
    (go-mode . projectile-mode)
    (haskell-mode . projectile-mode)
    (emacs-lisp-mode . projectile-mode))
#+end_src
** Go
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  '(defun go-fmt()
     (when (eq major-mode 'go-mode)
       (add-hook 'before-save-hook 'gofmt-before-save)))

      (use-package go-mode
        :defer t
        :commands go-mode
        :config
        (add-hook 'go-mode-hook 'gofmt-before-save))

  ;; Requires gocode binary ``go get github.com/mdempsky/gocode
      (use-package go-complete
        :defer t
        :after go-mode
        :config
        (add-hook 'completion-at-point-functions 'go-complete-at-point))
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package hindent
    :defer t
    :commands hindent-mode
    :hook (haskell-mode-hook . hindent-mode)
    :config (setq hindent-reformat-buffer-on-save t))

  (use-package dante
    :after haskell-mode
    :commands dante-mode
    :init
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'dante-mode))
#+end_src
** Smart parentheses
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package smartparens
    :defer t
    :commands smartparens-mode
    :hook
    ((prog-mode . smartparens-mode)
    (emacs-lisp-mode . smartparens-mode)
    (org-mode . smartparens-mode)
    (scheme-mode . smartparens-mode))
    :config
    (require 'smartparens-config))
#+END_SRC
** Git
Use magit to handle git repositories
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package magit
    :defer t
  :commands magit
  :general (mf/leader-keys
            "gb" 'magit-branch-checkout
            "gc" '(:ignore t)
            "gcb" 'magit-branch-and-checkout
            "gcc" 'magit-commit-create
            "gcr" 'magit-init
            "gcR" 'magit-clone
            "gg" 'magit-status
            "gC" 'magit-clone
            "gD" 'magit-file-delete
            "gF" 'magit-fetch
            "gG" 'magit-status-here
            "gL" 'magit-log
            "gS" 'magit-stage-file
            "gU" 'magit-unstage-file))
#+END_SRC
* Shell
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
      (use-package vterm
        :defer t
        :commands vterm
        :config
        (setq vterm-shell "/bin/sh")
        :general (mf/leader-keys
                   "RET" '(mf/toggle-vterm :which-key "vterm")))
#+end_src
* Org mode
** Setup
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
    (defun mf/org-mode-setup ()
          (org-indent-mode)
          (visual-line-mode 1))
#+end_src
** Org
#+begin_src emacs-lisp :tangle ~/.emacs.d/Emacs.el
  (use-package org
    :defer t
    :hook (org-mode . mf/org-mode-setup)
    :general (mf/leader-keys
               "Ot" '(:ignore t :which-key "Tangle")
               "Ott" '(org-babe-tangle :which-key "Tangle")
               "Otl" '(org-babel-load-file :which-key "Load file"))
    :config
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))
#+end_src
** In line latex previews
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/Emacs.el
        (use-package org-fragtog
          :defer t
          :after org
          :hook
         (org-mode . org-fragtog-mode)
         :bind (:map org-mode-map
                     ("C-c tf" . org-fragtog-mode)))
#+END_SRC
